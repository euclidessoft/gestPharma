a:46:{i:0;a:6:{s:4:"type";i:16384;s:7:"message";s:261:"Method "Symfony\Component\Form\AbstractType::buildForm()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\RechercheType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:1;a:6:{s:4:"type";i:16384;s:7:"message";s:268:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\RechercheType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:2;a:6:{s:4:"type";i:16384;s:7:"message";s:268:"Method "Symfony\Component\Form\AbstractType::getBlockPrefix()" might add "string" as a native return type declaration in the future. Do the same in child class "App\Form\RechercheType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:3;a:6:{s:4:"type";i:16384;s:7:"message";s:264:"Method "Symfony\Component\Form\AbstractType::buildForm()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\RegistrationType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:4;a:6:{s:4:"type";i:16384;s:7:"message";s:271:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\RegistrationType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:5;a:6:{s:4:"type";i:16384;s:7:"message";s:274:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\BloodGroupType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:6;a:6:{s:4:"type";i:16384;s:7:"message";s:270:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\BloodGroupType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:7;a:6:{s:4:"type";i:16384;s:7:"message";s:270:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\FemmesType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:8;a:6:{s:4:"type";i:16384;s:7:"message";s:266:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\FemmesType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:9;a:6:{s:4:"type";i:16384;s:7:"message";s:268:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\LinkType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:10;a:6:{s:4:"type";i:16384;s:7:"message";s:264:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\LinkType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:11;a:6:{s:4:"type";i:16384;s:7:"message";s:270:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\RegionType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:12;a:6:{s:4:"type";i:16384;s:7:"message";s:266:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\RegionType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:13;a:6:{s:4:"type";i:16384;s:7:"message";s:268:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\SexeType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:14;a:6:{s:4:"type";i:16384;s:7:"message";s:264:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\SexeType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:15;a:6:{s:4:"type";i:16384;s:7:"message";s:273:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\SituationType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:16;a:6:{s:4:"type";i:16384;s:7:"message";s:269:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\SituationType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:17;a:6:{s:4:"type";i:16384;s:7:"message";s:270:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\StatusType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:18;a:6:{s:4:"type";i:16384;s:7:"message";s:266:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\StatusType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:19;a:6:{s:4:"type";i:16384;s:7:"message";s:270:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\VerserType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:20;a:6:{s:4:"type";i:16384;s:7:"message";s:266:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\VerserType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:21;a:6:{s:4:"type";i:16384;s:7:"message";s:271:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\adresseType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:22;a:6:{s:4:"type";i:16384;s:7:"message";s:267:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\adresseType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:23;a:6:{s:4:"type";i:16384;s:7:"message";s:274:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\evaluationType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:24;a:6:{s:4:"type";i:16384;s:7:"message";s:270:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\evaluationType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:25;a:6:{s:4:"type";i:16384;s:7:"message";s:269:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\promoType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:26;a:6:{s:4:"type";i:16384;s:7:"message";s:265:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\promoType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:27;a:6:{s:4:"type";i:16384;s:7:"message";s:271:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\Type\reponseType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:28;a:6:{s:4:"type";i:16384;s:7:"message";s:267:"Method "Symfony\Component\Form\AbstractType::getParent()" might add "?string" as a native return type declaration in the future. Do the same in child class "App\Form\Type\reponseType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:29;a:6:{s:4:"type";i:16384;s:7:"message";s:256:"Method "Symfony\Component\Form\AbstractType::buildForm()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\UserType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:30;a:6:{s:4:"type";i:16384;s:7:"message";s:263:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\UserType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:31;a:6:{s:4:"type";i:16384;s:7:"message";s:266:"Method "Symfony\Component\Form\AbstractType::buildForm()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\changePasswordType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:32;a:6:{s:4:"type";i:16384;s:7:"message";s:273:"Method "Symfony\Component\Form\AbstractType::configureOptions()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\changePasswordType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:33;a:6:{s:4:"type";i:16384;s:7:"message";s:259:"Method "Twig\Extension\ExtensionInterface::getFunctions()" might add "array" as a native return type declaration in the future. Do the same in implementation "App\Twig\Compos" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:34;a:6:{s:4:"type";i:16384;s:7:"message";s:264:"Method "Twig\Extension\ExtensionInterface::getFunctions()" might add "array" as a native return type declaration in the future. Do the same in implementation "App\Twig\Composarabe" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:35;a:6:{s:4:"type";i:16384;s:7:"message";s:258:"Method "Twig\Extension\ExtensionInterface::getFunctions()" might add "array" as a native return type declaration in the future. Do the same in implementation "App\Twig\Notes" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:36;a:6:{s:4:"type";i:16384;s:7:"message";s:263:"Method "Twig\Extension\ExtensionInterface::getFunctions()" might add "array" as a native return type declaration in the future. Do the same in implementation "App\Twig\Notesarabe" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"C:\wamp\www\upgradegnt\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:37;a:6:{s:4:"type";i:16384;s:7:"message";s:201:"Since doctrine/doctrine-bundle 2.12: The default value of "doctrine.orm.controller_resolver.auto_mapping" will be changed from `true` to `false`. Explicitly configure `true` to keep existing behaviour.";s:4:"file";s:100:"C:\wamp\www\upgradegnt\vendor\doctrine\doctrine-bundle\src\DependencyInjection\DoctrineExtension.php";s:4:"line";i:504;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:100:"C:\wamp\www\upgradegnt\vendor\doctrine\doctrine-bundle\src\DependencyInjection\DoctrineExtension.php";s:4:"line";i:122;s:8:"function";s:7:"ormLoad";s:5:"class";s:68:"Doctrine\Bundle\DoctrineBundle\DependencyInjection\DoctrineExtension";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:38;a:6:{s:4:"type";i:16384;s:7:"message";s:173:"Since doctrine/doctrine-bundle 2.13: Enabling the controller resolver automapping feature has been deprecated. Symfony Mapped Route Parameters should be used as replacement.";s:4:"file";s:100:"C:\wamp\www\upgradegnt\vendor\doctrine\doctrine-bundle\src\DependencyInjection\DoctrineExtension.php";s:4:"line";i:509;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:100:"C:\wamp\www\upgradegnt\vendor\doctrine\doctrine-bundle\src\DependencyInjection\DoctrineExtension.php";s:4:"line";i:122;s:8:"function";s:7:"ormLoad";s:5:"class";s:68:"Doctrine\Bundle\DoctrineBundle\DependencyInjection\DoctrineExtension";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:39;a:6:{s:4:"type";i:16384;s:7:"message";s:279:"Method "Symfony\Component\Security\Core\User\UserInterface::eraseCredentials()" might add "void" as a native return type declaration in the future. Do the same in implementation "App\Entity\User" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:341;s:5:"trace";a:1:{i:0;a:4:{s:4:"file";s:72:"C:\wamp\www\upgradegnt\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:300;s:4:"args";a:1:{i:0;s:44:"C:\wamp\www\upgradegnt\src\Entity\Client.php";}s:8:"function";s:7:"include";}}s:5:"count";i:1;}i:40;a:6:{s:4:"type";i:16384;s:7:"message";s:249:"Since symfony/security-bundle 6.2: The "Symfony\Component\Security\Core\Security" service alias is deprecated, use "Symfony\Bundle\SecurityBundle\Security" instead. It is being referenced by the "App\Controller\DemandeExplicationController" service.";s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:67;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:50;s:8:"function";s:15:"getDefinitionId";s:5:"class";s:77:"Symfony\Component\DependencyInjection\Compiler\ResolveReferencesToAliasesPass";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:41;a:6:{s:4:"type";i:16384;s:7:"message";s:230:"Since symfony/security-bundle 6.2: The "Symfony\Component\Security\Core\Security" service alias is deprecated, use "Symfony\Bundle\SecurityBundle\Security" instead. It is being referenced by the ".service_locator.3aQkSBW" service.";s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:67;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:50;s:8:"function";s:15:"getDefinitionId";s:5:"class";s:77:"Symfony\Component\DependencyInjection\Compiler\ResolveReferencesToAliasesPass";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:42;a:6:{s:4:"type";i:16384;s:7:"message";s:230:"Since symfony/security-bundle 6.2: The "Symfony\Component\Security\Core\Security" service alias is deprecated, use "Symfony\Bundle\SecurityBundle\Security" instead. It is being referenced by the ".service_locator.YgYapZ6" service.";s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:67;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:50;s:8:"function";s:15:"getDefinitionId";s:5:"class";s:77:"Symfony\Component\DependencyInjection\Compiler\ResolveReferencesToAliasesPass";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:43;a:6:{s:4:"type";i:16384;s:7:"message";s:230:"Since symfony/security-bundle 6.2: The "Symfony\Component\Security\Core\Security" service alias is deprecated, use "Symfony\Bundle\SecurityBundle\Security" instead. It is being referenced by the ".service_locator.im1kX7r" service.";s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:67;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:50;s:8:"function";s:15:"getDefinitionId";s:5:"class";s:77:"Symfony\Component\DependencyInjection\Compiler\ResolveReferencesToAliasesPass";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:44;a:6:{s:4:"type";i:16384;s:7:"message";s:230:"Since symfony/security-bundle 6.2: The "Symfony\Component\Security\Core\Security" service alias is deprecated, use "Symfony\Bundle\SecurityBundle\Security" instead. It is being referenced by the ".service_locator.ORb6BpB" service.";s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:67;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:50;s:8:"function";s:15:"getDefinitionId";s:5:"class";s:77:"Symfony\Component\DependencyInjection\Compiler\ResolveReferencesToAliasesPass";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:45;a:6:{s:4:"type";i:16384;s:7:"message";s:230:"Since symfony/security-bundle 6.2: The "Symfony\Component\Security\Core\Security" service alias is deprecated, use "Symfony\Bundle\SecurityBundle\Security" instead. It is being referenced by the ".service_locator.J0_MNy." service.";s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:67;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:102:"C:\wamp\www\upgradegnt\vendor\symfony\dependency-injection\Compiler\ResolveReferencesToAliasesPass.php";s:4:"line";i:50;s:8:"function";s:15:"getDefinitionId";s:5:"class";s:77:"Symfony\Component\DependencyInjection\Compiler\ResolveReferencesToAliasesPass";s:4:"type";s:2:"->";}}s:5:"count";i:1;}}