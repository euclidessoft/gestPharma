<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Absence__CLASSMETADATA__' => 0,
'App__Entity__Album__CLASSMETADATA__' => 1,
'App__Entity__Facture__CLASSMETADATA__' => 2,
'App__Entity__Achat__CLASSMETADATA__' => 3,
'App__Entity__Approvisionner__CLASSMETADATA__' => 4,
'App__Entity__Commande__CLASSMETADATA__' => 5,
'App__Entity__Reclamation__CLASSMETADATA__' => 6,
'App__Entity__Avoir__CLASSMETADATA__' => 7,
'App__Entity__Banque__CLASSMETADATA__' => 8,
'App__Entity__Calendrier__CLASSMETADATA__' => 9,
'App__Entity__Categorie__CLASSMETADATA__' => 10,
'App__Entity__Client__CLASSMETADATA__' => 11,
'App__Entity__User__CLASSMETADATA__' => 12,
'App__Entity__Conges__CLASSMETADATA__' => 13,
'App__Entity__Contrat__CLASSMETADATA__' => 14,
'App__Entity__CritereEvaluation__CLASSMETADATA__' => 15,
'App__Entity__DemandeExplication__CLASSMETADATA__' => 16,
'App__Entity__Departement__CLASSMETADATA__' => 17,
'App__Entity__Depense__CLASSMETADATA__' => 18,
'App__Entity__Employe__CLASSMETADATA__' => 19,
'App__Entity__Document__CLASSMETADATA__' => 20,
'App__Entity__Evaluation__CLASSMETADATA__' => 21,
'App__Entity__Feedback__CLASSMETADATA__' => 22,
'App__Entity__Financement__CLASSMETADATA__' => 23,
'App__Entity__Formation__CLASSMETADATA__' => 24,
'App__Entity__Fournisseur__CLASSMETADATA__' => 25,
'App__Entity__HeureSuplementaire__CLASSMETADATA__' => 26,
'App__Entity__Livrer__CLASSMETADATA__' => 27,
'App__Entity__Retour__CLASSMETADATA__' => 28,
'App__Entity__MessageRecipient__CLASSMETADATA__' => 29,
'App__Entity__Message__CLASSMETADATA__' => 30,
'App__Entity__NoteService__CLASSMETADATA__' => 31,
'App__Entity__Paie__CLASSMETADATA__' => 32,
'App__Entity__Produit__CLASSMETADATA__' => 33,
'App__Entity__Poste__CLASSMETADATA__' => 34,
'App__Entity__Prime__CLASSMETADATA__' => 35,
'App__Entity__PrimePerformance__CLASSMETADATA__' => 36,
'App__Entity__Promotion__CLASSMETADATA__' => 37,
'App__Entity__Remboursement__CLASSMETADATA__' => 38,
'App__Entity__Reponse__CLASSMETADATA__' => 39,
'App__Entity__Sanction__CLASSMETADATA__' => 40,
'App__Entity__Suggestion__CLASSMETADATA__' => 41,
'App__Entity__Test__CLASSMETADATA__' => 42,
'App__Entity__Transfert__CLASSMETADATA__' => 43,
'App__Entity__TypeConge__CLASSMETADATA__' => 44,
'App__Entity__TypeContrat__CLASSMETADATA__' => 45,
'App__Entity__TypeSanction__CLASSMETADATA__' => 46,
'App__Entity__Approvisionnement__CLASSMETADATA__' => 47,
'App__Entity__AvoirReste__CLASSMETADATA__' => 48,
'App__Entity__Candidature__CLASSMETADATA__' => 49,
'App__Entity__CommandeProduit__CLASSMETADATA__' => 50,
'App__Entity__Compte__CLASSMETADATA__' => 51,
'App__Entity__Credit__CLASSMETADATA__' => 52,
'App__Entity__Cv__CLASSMETADATA__' => 53,
'App__Entity__Debit__CLASSMETADATA__' => 54,
'App__Entity__Decision__CLASSMETADATA__' => 55,
'App__Entity__Ecriture__CLASSMETADATA__' => 56,
'App__Entity__EmployeFormation__CLASSMETADATA__' => 57,
'App__Entity__EvaluationDetail__CLASSMETADATA__' => 58,
'App__Entity__FournisseurProduit__CLASSMETADATA__' => 59,
'App__Entity__Image__CLASSMETADATA__' => 60,
'App__Entity__LivrerProduit__CLASSMETADATA__' => 61,
'App__Entity__LivrerReste__CLASSMETADATA__' => 62,
'App__Entity__MessageReply__CLASSMETADATA__' => 63,
'App__Entity__Mois__CLASSMETADATA__' => 64,
'App__Entity__Notification__CLASSMETADATA__' => 65,
'App__Entity__Numero__CLASSMETADATA__' => 66,
'App__Entity__Paiement__CLASSMETADATA__' => 67,
'App__Entity__PaieSalaire__CLASSMETADATA__' => 68,
'App__Entity__PosteEmploye__CLASSMETADATA__' => 69,
'App__Entity__PromotionProduit__CLASSMETADATA__' => 70,
'App__Entity__ReponseAbsence__CLASSMETADATA__' => 71,
'App__Entity__ReponseExplication__CLASSMETADATA__' => 72,
'App__Entity__Retenue__CLASSMETADATA__' => 73,
'App__Entity__RetourProduit__CLASSMETADATA__' => 74,
'App__Entity__Stock__CLASSMETADATA__' => 75,
'App__Entity__TamponAbsence__CLASSMETADATA__' => 76,
'App__Entity__Versement__CLASSMETADATA__' => 77,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Absence',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AbsenceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'dateAbsence' => $o[2],
                        'justifier' => $o[3],
                        'status' => $o[4],
                        'dateConfirm' => $o[5],
                        'dateFin' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date_absence' => 'dateAbsence',
                        'justifier' => 'justifier',
                        'status' => 'status',
                        'date_confirm' => 'dateConfirm',
                        'date_fin' => 'dateFin',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'dateAbsence' => 'date_absence',
                        'justifier' => 'justifier',
                        'status' => 'status',
                        'dateConfirm' => 'date_confirm',
                        'dateFin' => 'date_fin',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'absence',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[7],
                        'reponseAbsences' => $o[9],
                        'responsable' => $o[10],
                        'decisions' => $o[12],
                    ],
                ],
                'idGenerator' => [
                    $o[13],
                ],
                'name' => [
                    'App\\Entity\\Absence',
                    8 => 'employe_id',
                    11 => 'responsable_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                    'boolean',
                    'boolean',
                    'datetime',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'dateAbsence',
                    'justifier',
                    'status',
                    'dateConfirm',
                    'dateFin',
                ],
                'columnName' => [
                    1 => 'id',
                    'date_absence',
                    'justifier',
                    'status',
                    'date_confirm',
                    'date_fin',
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    true,
                ],
                'fetch' => [
                    7 => 2,
                    9 => 2,
                    2,
                    12 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Absence',
                    9 => 'App\\Entity\\Absence',
                    'App\\Entity\\Absence',
                    12 => 'App\\Entity\\Absence',
                ],
                'inversedBy' => [
                    7 => 'absences',
                    10 => 'absence',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'employe_id' => 'id',
                    ],
                    10 => [
                        'responsable_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'employe_id',
                    ],
                    10 => [
                        'id' => 'responsable_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                    10 => [
                        $o[11],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'employe_id' => 'employe_id',
                    ],
                    10 => [
                        'responsable_id' => 'responsable_id',
                    ],
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    11 => 'id',
                ],
                'mappedBy' => [
                    9 => 'absence',
                    12 => 'absences',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'employe',
                    9 => 'reponseAbsences',
                    'responsable',
                    12 => 'decisions',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Employe',
                    9 => 'App\\Entity\\ReponseAbsence',
                    'App\\Entity\\Employe',
                    12 => 'App\\Entity\\Decision',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Album',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AlbumRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'cover' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'cover' => 'cover',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'cover' => 'cover',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'album',
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Album',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'cover',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'cover',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Facture',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\FactureRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'montant' => $o[2],
                        'payer' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'payer' => 'payer',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'payer' => 'payer',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'facture',
                    ],
                ],
                'associationMappings' => [
                    [
                        'fournisseur' => $o[4],
                        'approvisionner' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Facture',
                    5 => 'fournisseur_id',
                    7 => 'approvisionner_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'montant',
                    'payer',
                ],
                'columnName' => [
                    1 => 'id',
                    'montant',
                    'payer',
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Facture',
                    6 => 'App\\Entity\\Facture',
                ],
                'inversedBy' => [
                    4 => 'factures',
                    6 => 'factures',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'fournisseur_id' => 'id',
                    ],
                    6 => [
                        'approvisionner_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'fournisseur_id',
                    ],
                    6 => [
                        'id' => 'approvisionner_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'fournisseur_id' => 'fournisseur_id',
                    ],
                    6 => [
                        'approvisionner_id' => 'approvisionner_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'fournisseur',
                    6 => 'approvisionner',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Fournisseur',
                    6 => 'App\\Entity\\Approvisionner',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Achat',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AchatRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'montant' => $o[2],
                        'type' => $o[3],
                        'numero' => $o[4],
                        'compte' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'type' => 'type',
                        'numero' => 'numero',
                        'compte' => 'compte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'type' => 'type',
                        'numero' => 'numero',
                        'compte' => 'compte',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'achat',
                    ],
                ],
                'associationMappings' => [
                    [
                        'fournisseur' => $o[6],
                        'user' => $o[8],
                        'banque' => $o[10],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\Achat',
                    7 => 'fournisseur_id',
                    9 => 'user_id',
                    11 => 'banque_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'string',
                    'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'montant',
                    'type',
                    'numero',
                    'compte',
                ],
                'columnName' => [
                    1 => 'id',
                    'montant',
                    'type',
                    'numero',
                    'compte',
                ],
                'length' => [
                    3 => 255,
                    5 => 255,
                ],
                'nullable' => [
                    4 => true,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                    10 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Achat',
                    8 => 'App\\Entity\\Achat',
                    10 => 'App\\Entity\\Achat',
                ],
                'inversedBy' => [
                    6 => 'achats',
                    10 => 'achats',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'fournisseur_id' => 'id',
                    ],
                    8 => [
                        'user_id' => 'id',
                    ],
                    10 => [
                        'banque_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'fournisseur_id',
                    ],
                    8 => [
                        'id' => 'user_id',
                    ],
                    10 => [
                        'id' => 'banque_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'fournisseur_id' => 'fournisseur_id',
                    ],
                    8 => [
                        'user_id' => 'user_id',
                    ],
                    10 => [
                        'banque_id' => 'banque_id',
                    ],
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                    11 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'fournisseur',
                    8 => 'user',
                    10 => 'banque',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Fournisseur',
                    8 => 'App\\Entity\\User',
                    10 => 'App\\Entity\\Banque',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Approvisionner',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ApprovisionnerRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'approvisionner',
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[3],
                        'factures' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Approvisionner',
                    4 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                ],
                'fetch' => [
                    3 => 2,
                    5 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Approvisionner',
                    5 => 'App\\Entity\\Approvisionner',
                ],
                'sourceToTargetKeyColumns' => [
                    3 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    3 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    3 => [
                        $o[4],
                    ],
                ],
                'joinColumnFieldNames' => [
                    3 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'unique' => [
                    4 => false,
                ],
                'nullable' => [
                    4 => false,
                ],
                'referencedColumnName' => [
                    4 => 'id',
                ],
                'mappedBy' => [
                    5 => 'approvisionner',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'user',
                    5 => 'factures',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Employe',
                    5 => 'App\\Entity\\Facture',
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Commande',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CommandeRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'Montant' => $o[3],
                        'versement' => $o[4],
                        'reduction' => $o[5],
                        'suivi' => $o[6],
                        'livraison' => $o[7],
                        'datelivrer' => $o[8],
                        'tva' => $o[9],
                        'credit' => $o[10],
                        'payer' => $o[11],
                        'livrer' => $o[12],
                        'dateefectlivraison' => $o[13],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'montant' => 'Montant',
                        'versement' => 'versement',
                        'reduction' => 'reduction',
                        'suivi' => 'suivi',
                        'livraison' => 'livraison',
                        'datelivrer' => 'datelivrer',
                        'tva' => 'tva',
                        'credit' => 'credit',
                        'payer' => 'payer',
                        'livrer' => 'livrer',
                        'dateefectlivraison' => 'dateefectlivraison',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'Montant' => 'montant',
                        'versement' => 'versement',
                        'reduction' => 'reduction',
                        'suivi' => 'suivi',
                        'livraison' => 'livraison',
                        'datelivrer' => 'datelivrer',
                        'tva' => 'tva',
                        'credit' => 'credit',
                        'payer' => 'payer',
                        'livrer' => 'livrer',
                        'dateefectlivraison' => 'dateefectlivraison',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'commande',
                    ],
                ],
                'associationMappings' => [
                    [
                        'versements' => $o[14],
                        'user' => $o[15],
                        'admin' => $o[17],
                        'livreur' => $o[19],
                        'paiement' => $o[21],
                        'commandeProduits' => $o[23],
                    ],
                ],
                'idGenerator' => [
                    $o[24],
                ],
                'name' => [
                    'App\\Entity\\Commande',
                    16 => 'user_id',
                    18 => 'admin_id',
                    20 => 'livreur_id',
                    22 => 'paiement_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'float',
                    'float',
                    'float',
                    'boolean',
                    'boolean',
                    'date',
                    'float',
                    'boolean',
                    'boolean',
                    'boolean',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'Montant',
                    'versement',
                    'reduction',
                    'suivi',
                    'livraison',
                    'datelivrer',
                    'tva',
                    'credit',
                    'payer',
                    'livrer',
                    'dateefectlivraison',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'montant',
                    'versement',
                    'reduction',
                    'suivi',
                    'livraison',
                    'datelivrer',
                    'tva',
                    'credit',
                    'payer',
                    'livrer',
                    'dateefectlivraison',
                ],
                'nullable' => [
                    8 => true,
                    13 => true,
                    16 => false,
                    18 => true,
                    20 => true,
                    22 => true,
                ],
                'fetch' => [
                    14 => 2,
                    2,
                    17 => 2,
                    19 => 2,
                    21 => 2,
                    23 => 2,
                ],
                'sourceEntity' => [
                    14 => 'App\\Entity\\Commande',
                    'App\\Entity\\Commande',
                    17 => 'App\\Entity\\Commande',
                    19 => 'App\\Entity\\Commande',
                    21 => 'App\\Entity\\Commande',
                    23 => 'App\\Entity\\Commande',
                ],
                'mappedBy' => [
                    14 => 'commande',
                    23 => 'commande',
                ],
                'sourceToTargetKeyColumns' => [
                    15 => [
                        'user_id' => 'id',
                    ],
                    17 => [
                        'admin_id' => 'id',
                    ],
                    19 => [
                        'livreur_id' => 'id',
                    ],
                    21 => [
                        'paiement_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    15 => [
                        'id' => 'user_id',
                    ],
                    17 => [
                        'id' => 'admin_id',
                    ],
                    19 => [
                        'id' => 'livreur_id',
                    ],
                    21 => [
                        'id' => 'paiement_id',
                    ],
                ],
                'joinColumns' => [
                    15 => [
                        $o[16],
                    ],
                    17 => [
                        $o[18],
                    ],
                    19 => [
                        $o[20],
                    ],
                    21 => [
                        $o[22],
                    ],
                ],
                'joinColumnFieldNames' => [
                    15 => [
                        'user_id' => 'user_id',
                    ],
                    17 => [
                        'admin_id' => 'admin_id',
                    ],
                    19 => [
                        'livreur_id' => 'livreur_id',
                    ],
                    21 => [
                        'paiement_id' => 'paiement_id',
                    ],
                ],
                'unique' => [
                    16 => false,
                    18 => false,
                    20 => false,
                    22 => false,
                ],
                'referencedColumnName' => [
                    16 => 'id',
                    18 => 'id',
                    20 => 'id',
                    22 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    14 => 'versements',
                    'user',
                    17 => 'admin',
                    19 => 'livreur',
                    21 => 'paiement',
                    23 => 'commandeProduits',
                ],
                'targetEntity' => [
                    14 => 'App\\Entity\\Versement',
                    'App\\Entity\\Client',
                    17 => 'App\\Entity\\Employe',
                    19 => 'App\\Entity\\Employe',
                    21 => 'App\\Entity\\Paiement',
                    23 => 'App\\Entity\\CommandeProduit',
                ],
            ],
        ],
        $o[0],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Reclamation',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ReclamationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'creation' => $o[2],
                        'status' => $o[3],
                        'cloture' => $o[4],
                        'commentaire' => $o[5],
                        'motif' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'creation' => 'creation',
                        'status' => 'status',
                        'cloture' => 'cloture',
                        'commentaire' => 'commentaire',
                        'motif' => 'motif',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'creation' => 'creation',
                        'status' => 'status',
                        'cloture' => 'cloture',
                        'commentaire' => 'commentaire',
                        'motif' => 'motif',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'reclamation',
                    ],
                ],
                'associationMappings' => [
                    [
                        'usercloture' => $o[7],
                        'user' => $o[9],
                        'reponses' => $o[11],
                        'commande' => $o[12],
                        'produits' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[18],
                ],
                'name' => [
                    'App\\Entity\\Reclamation',
                    8 => 'usercloture_id',
                    10 => 'user_id',
                    13 => 'commande_id',
                    15 => 'reclamation_produit',
                    'reclamation_id',
                    'produit_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                    'boolean',
                    'datetime',
                    'text',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'creation',
                    'status',
                    'cloture',
                    'commentaire',
                    'motif',
                ],
                'columnName' => [
                    1 => 'id',
                    'creation',
                    'status',
                    'cloture',
                    'commentaire',
                    'motif',
                ],
                'nullable' => [
                    4 => true,
                    8 => true,
                    10 => false,
                    13 => false,
                    16 => true,
                ],
                'length' => [
                    6 => 255,
                ],
                'fetch' => [
                    7 => 2,
                    9 => 2,
                    11 => 2,
                    2,
                    14 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Reclamation',
                    9 => 'App\\Entity\\Reclamation',
                    11 => 'App\\Entity\\Reclamation',
                    'App\\Entity\\Reclamation',
                    14 => 'App\\Entity\\Reclamation',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'usercloture_id' => 'id',
                    ],
                    9 => [
                        'user_id' => 'id',
                    ],
                    12 => [
                        'commande_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'usercloture_id',
                    ],
                    9 => [
                        'id' => 'user_id',
                    ],
                    12 => [
                        'id' => 'commande_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                    12 => [
                        $o[13],
                    ],
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'usercloture_id' => 'usercloture_id',
                    ],
                    9 => [
                        'user_id' => 'user_id',
                    ],
                    12 => [
                        'commande_id' => 'commande_id',
                    ],
                ],
                'unique' => [
                    8 => false,
                    10 => false,
                    13 => false,
                    16 => false,
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    10 => 'id',
                    13 => 'id',
                    16 => 'id',
                    'id',
                ],
                'mappedBy' => [
                    11 => 'reclamation',
                ],
                'isOnDeleteCascade' => [
                    14 => true,
                ],
                'joinTable' => [
                    14 => $o[15],
                ],
                'joinTableColumns' => [
                    14 => [
                        'reclamation_id',
                        'produit_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    14 => [
                        'reclamation_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    14 => [
                        'produit_id' => 'id',
                    ],
                ],
                'inverseJoinColumns' => [
                    15 => [
                        $o[17],
                    ],
                ],
                'onDelete' => [
                    17 => 'CASCADE',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'usercloture',
                    9 => 'user',
                    11 => 'reponses',
                    'commande',
                    14 => 'produits',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Employe',
                    9 => 'App\\Entity\\Client',
                    11 => 'App\\Entity\\Reponse',
                    'App\\Entity\\Commande',
                    14 => 'App\\Entity\\Produit',
                ],
            ],
        ],
        $o[0],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToOneInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToOneInverseSideMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Avoir',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AvoirRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'Montant' => $o[3],
                        'rebourser' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'montant' => 'Montant',
                        'rebourser' => 'rebourser',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'Montant' => 'montant',
                        'rebourser' => 'rebourser',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'avoir',
                    ],
                ],
                'associationMappings' => [
                    [
                        'admin' => $o[5],
                        'client' => $o[7],
                        'commande' => $o[9],
                        'reclamation' => $o[11],
                        'reste' => $o[13],
                        'retour' => $o[15],
                        'remboursement' => $o[17],
                    ],
                ],
                'idGenerator' => [
                    $o[18],
                ],
                'name' => [
                    'App\\Entity\\Avoir',
                    6 => 'admin_id',
                    8 => 'client_id',
                    10 => 'commande_id',
                    12 => 'reclamation_id',
                    14 => 'reste_id',
                    16 => 'retour_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'float',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'Montant',
                    'rebourser',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'montant',
                    'rebourser',
                ],
                'fetch' => [
                    5 => 2,
                    7 => 2,
                    9 => 2,
                    11 => 2,
                    13 => 2,
                    15 => 2,
                    17 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\Avoir',
                    7 => 'App\\Entity\\Avoir',
                    9 => 'App\\Entity\\Avoir',
                    11 => 'App\\Entity\\Avoir',
                    13 => 'App\\Entity\\Avoir',
                    15 => 'App\\Entity\\Avoir',
                    17 => 'App\\Entity\\Avoir',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'admin_id' => 'id',
                    ],
                    7 => [
                        'client_id' => 'id',
                    ],
                    9 => [
                        'commande_id' => 'id',
                    ],
                    11 => [
                        'reclamation_id' => 'id',
                    ],
                    13 => [
                        'reste_id' => 'id',
                    ],
                    15 => [
                        'retour_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'admin_id',
                    ],
                    7 => [
                        'id' => 'client_id',
                    ],
                    9 => [
                        'id' => 'commande_id',
                    ],
                    11 => [
                        'id' => 'reclamation_id',
                    ],
                    13 => [
                        'id' => 'reste_id',
                    ],
                    15 => [
                        'id' => 'retour_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                    13 => [
                        $o[14],
                    ],
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'admin_id' => 'admin_id',
                    ],
                    7 => [
                        'client_id' => 'client_id',
                    ],
                    9 => [
                        'commande_id' => 'commande_id',
                    ],
                    11 => [
                        'reclamation_id' => 'reclamation_id',
                    ],
                    13 => [
                        'reste_id' => 'reste_id',
                    ],
                    15 => [
                        'retour_id' => 'retour_id',
                    ],
                ],
                'unique' => [
                    6 => false,
                    8 => false,
                    10 => false,
                    12 => false,
                    14 => false,
                    16 => false,
                ],
                'nullable' => [
                    6 => false,
                    8 => false,
                    10 => false,
                    12 => true,
                    14 => true,
                    16 => true,
                ],
                'referencedColumnName' => [
                    6 => 'id',
                    8 => 'id',
                    10 => 'id',
                    12 => 'id',
                    14 => 'id',
                    16 => 'id',
                ],
                'cascade' => [
                    17 => [
                        'persist',
                        'remove',
                    ],
                ],
                'mappedBy' => [
                    17 => 'avoir',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'admin',
                    7 => 'client',
                    9 => 'commande',
                    11 => 'reclamation',
                    13 => 'reste',
                    15 => 'retour',
                    17 => 'remboursement',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Employe',
                    7 => 'App\\Entity\\Client',
                    9 => 'App\\Entity\\Commande',
                    11 => 'App\\Entity\\Reclamation',
                    13 => 'App\\Entity\\LivrerReste',
                    15 => 'App\\Entity\\Retour',
                    17 => 'App\\Entity\\Remboursement',
                ],
            ],
        ],
        $o[0],
        []
    );
},
8 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Banque',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\BanqueRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'compte' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'compte' => 'compte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'compte' => 'compte',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'banque',
                    ],
                ],
                'associationMappings' => [
                    [
                        'achats' => $o[4],
                        'transferts' => $o[5],
                        'remboursements' => $o[6],
                        'financements' => $o[7],
                        'depenses' => $o[8],
                        'paiements' => $o[9],
                        'versements' => $o[10],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Banque',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'compte',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'compte',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
                'fetch' => [
                    4 => 2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Banque',
                    'App\\Entity\\Banque',
                    'App\\Entity\\Banque',
                    'App\\Entity\\Banque',
                    'App\\Entity\\Banque',
                    'App\\Entity\\Banque',
                    'App\\Entity\\Banque',
                ],
                'mappedBy' => [
                    4 => 'banque',
                    'banque',
                    'banque',
                    'banque',
                    'banque',
                    'banque',
                    'banque',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'achats',
                    'transferts',
                    'remboursements',
                    'financements',
                    'depenses',
                    'paiements',
                    'versements',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Achat',
                    'App\\Entity\\Transfert',
                    'App\\Entity\\Remboursement',
                    'App\\Entity\\Financement',
                    'App\\Entity\\Depense',
                    'App\\Entity\\Paiement',
                    'App\\Entity\\Versement',
                ],
            ],
        ],
        $o[0],
        []
    );
},
9 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Calendrier',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CalendrierRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'dateDebut' => $o[2],
                        'dateFin' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date_debut' => 'dateDebut',
                        'date_fin' => 'dateFin',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'dateDebut' => 'date_debut',
                        'dateFin' => 'date_fin',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'calendrier',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Calendrier',
                    5 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'dateDebut',
                    'dateFin',
                ],
                'columnName' => [
                    1 => 'id',
                    'date_debut',
                    'date_fin',
                ],
                'fetch' => [
                    4 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Calendrier',
                ],
                'inversedBy' => [
                    4 => 'calendriers',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'employe',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
10 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Categorie',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CategorieRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'description' => $o[3],
                        'compte' => $o[4],
                        'actif' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                        'compte' => 'compte',
                        'actif' => 'actif',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                        'compte' => 'compte',
                        'actif' => 'actif',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'categorie',
                    ],
                ],
                'associationMappings' => [
                    [
                        'depenses' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\Categorie',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'string',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'description',
                    'compte',
                    'actif',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'description',
                    'compte',
                    'actif',
                ],
                'length' => [
                    2 => 255,
                    4 => 255,
                ],
                'nullable' => [
                    3 => true,
                ],
                'fetch' => [
                    6 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Categorie',
                ],
                'mappedBy' => [
                    6 => 'categorie',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'depenses',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Depense',
                ],
            ],
        ],
        $o[0],
        []
    );
},
11 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\DiscriminatorColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\DiscriminatorColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'parentClasses' => [
                    [
                        'App\\Entity\\User',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'inheritanceType' => [
                    2,
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'username' => $o[2],
                        'password' => $o[3],
                        'email' => $o[4],
                        'prenom' => $o[5],
                        'nom' => $o[6],
                        'phone' => $o[7],
                        'adresse' => $o[8],
                        'fonction' => $o[9],
                        'roles' => $o[10],
                        'resetToken' => $o[11],
                        'enabled' => $o[12],
                        'client' => $o[13],
                        'livreur' => $o[14],
                        'compte' => $o[15],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'username' => 'username',
                        'password' => 'password',
                        'email' => 'email',
                        'prenom' => 'prenom',
                        'nom' => 'nom',
                        'phone' => 'phone',
                        'adresse' => 'adresse',
                        'fonction' => 'fonction',
                        'roles' => 'roles',
                        'reset_token' => 'resetToken',
                        'enabled' => 'enabled',
                        'client' => 'client',
                        'livreur' => 'livreur',
                        'compte' => 'compte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'username' => 'username',
                        'password' => 'password',
                        'email' => 'email',
                        'prenom' => 'prenom',
                        'nom' => 'nom',
                        'phone' => 'phone',
                        'adresse' => 'adresse',
                        'fonction' => 'fonction',
                        'roles' => 'roles',
                        'resetToken' => 'reset_token',
                        'enabled' => 'enabled',
                        'client' => 'client',
                        'livreur' => 'livreur',
                        'compte' => 'compte',
                    ],
                ],
                'discriminatorValue' => [
                    'client',
                ],
                'discriminatorMap' => [
                    [
                        'client' => 'App\\Entity\\Client',
                        'employe' => 'App\\Entity\\Employe',
                    ],
                ],
                'discriminatorColumn' => [
                    $o[16],
                ],
                'table' => [
                    [
                        'name' => 'client',
                    ],
                ],
                'associationMappings' => [
                    [
                        'transferts' => $o[17],
                        'depenses' => $o[18],
                        'sent' => $o[19],
                        'received' => $o[20],
                    ],
                ],
                'idGenerator' => [
                    $o[21],
                ],
                'name' => [
                    'App\\Entity\\Client',
                    16 => 'typeuser',
                ],
                'id' => [
                    1 => true,
                ],
                'inherited' => [
                    1 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    17 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'declared' => [
                    1 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    17 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'array',
                    'string',
                    'boolean',
                    'boolean',
                    'boolean',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'username',
                    'password',
                    'email',
                    'prenom',
                    'nom',
                    'phone',
                    'adresse',
                    'fonction',
                    'roles',
                    'resetToken',
                    'enabled',
                    'client',
                    'livreur',
                    'compte',
                    'typeuser',
                ],
                'columnName' => [
                    1 => 'id',
                    'username',
                    'password',
                    'email',
                    'prenom',
                    'nom',
                    'phone',
                    'adresse',
                    'fonction',
                    'roles',
                    'reset_token',
                    'enabled',
                    'client',
                    'livreur',
                    'compte',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    11 => 255,
                    15 => 255,
                    255,
                ],
                'nullable' => [
                    2 => true,
                    5 => true,
                    true,
                    8 => true,
                    10 => true,
                    true,
                    15 => true,
                ],
                'fetch' => [
                    17 => 2,
                    2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    17 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'mappedBy' => [
                    17 => 'user',
                    'user',
                    'sender',
                    'recipient',
                ],
                'cascade' => [
                    19 => [
                        'remove',
                    ],
                    [
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    19 => true,
                    true,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    17 => 'transferts',
                    'depenses',
                    'sent',
                    'received',
                ],
                'targetEntity' => [
                    17 => 'App\\Entity\\Transfert',
                    'App\\Entity\\Depense',
                    'App\\Entity\\Message',
                    'App\\Entity\\MessageRecipient',
                ],
            ],
        ],
        $o[0],
        []
    );
},
12 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\DiscriminatorColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\DiscriminatorColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UserRepository',
                ],
                'subClasses' => [
                    [
                        'App\\Entity\\Client',
                        'App\\Entity\\Employe',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'inheritanceType' => [
                    2,
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'username' => $o[2],
                        'password' => $o[3],
                        'email' => $o[4],
                        'prenom' => $o[5],
                        'nom' => $o[6],
                        'phone' => $o[7],
                        'adresse' => $o[8],
                        'fonction' => $o[9],
                        'roles' => $o[10],
                        'resetToken' => $o[11],
                        'enabled' => $o[12],
                        'client' => $o[13],
                        'livreur' => $o[14],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'username' => 'username',
                        'password' => 'password',
                        'email' => 'email',
                        'prenom' => 'prenom',
                        'nom' => 'nom',
                        'phone' => 'phone',
                        'adresse' => 'adresse',
                        'fonction' => 'fonction',
                        'roles' => 'roles',
                        'reset_token' => 'resetToken',
                        'enabled' => 'enabled',
                        'client' => 'client',
                        'livreur' => 'livreur',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'username' => 'username',
                        'password' => 'password',
                        'email' => 'email',
                        'prenom' => 'prenom',
                        'nom' => 'nom',
                        'phone' => 'phone',
                        'adresse' => 'adresse',
                        'fonction' => 'fonction',
                        'roles' => 'roles',
                        'resetToken' => 'reset_token',
                        'enabled' => 'enabled',
                        'client' => 'client',
                        'livreur' => 'livreur',
                    ],
                ],
                'discriminatorMap' => [
                    [
                        'client' => 'App\\Entity\\Client',
                        'employe' => 'App\\Entity\\Employe',
                    ],
                ],
                'discriminatorColumn' => [
                    $o[15],
                ],
                'table' => [
                    [
                        'name' => 'user',
                    ],
                ],
                'associationMappings' => [
                    [
                        'transferts' => $o[16],
                        'depenses' => $o[17],
                        'sent' => $o[18],
                        'received' => $o[19],
                    ],
                ],
                'idGenerator' => [
                    $o[20],
                ],
                'name' => [
                    'App\\Entity\\User',
                    15 => 'typeuser',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'array',
                    'string',
                    'boolean',
                    'boolean',
                    'boolean',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'username',
                    'password',
                    'email',
                    'prenom',
                    'nom',
                    'phone',
                    'adresse',
                    'fonction',
                    'roles',
                    'resetToken',
                    'enabled',
                    'client',
                    'livreur',
                    'typeuser',
                ],
                'columnName' => [
                    1 => 'id',
                    'username',
                    'password',
                    'email',
                    'prenom',
                    'nom',
                    'phone',
                    'adresse',
                    'fonction',
                    'roles',
                    'reset_token',
                    'enabled',
                    'client',
                    'livreur',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    11 => 255,
                    15 => 255,
                ],
                'nullable' => [
                    2 => true,
                    5 => true,
                    true,
                    8 => true,
                    10 => true,
                    true,
                ],
                'fetch' => [
                    16 => 2,
                    2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    16 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'mappedBy' => [
                    16 => 'user',
                    'user',
                    'sender',
                    'recipient',
                ],
                'cascade' => [
                    18 => [
                        'remove',
                    ],
                    [
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    18 => true,
                    true,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    16 => 'transferts',
                    'depenses',
                    'sent',
                    'received',
                ],
                'targetEntity' => [
                    16 => 'App\\Entity\\Transfert',
                    'App\\Entity\\Depense',
                    'App\\Entity\\Message',
                    'App\\Entity\\MessageRecipient',
                ],
            ],
        ],
        $o[0],
        []
    );
},
13 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Conges',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CongesRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'dateDebut' => $o[2],
                        'dateFin' => $o[3],
                        'createdAt' => $o[4],
                        'updatedAt' => $o[5],
                        'status' => $o[6],
                        'description' => $o[7],
                        'dateModifier' => $o[8],
                        'dateDebutAccorder' => $o[9],
                        'dateFinAccorder' => $o[10],
                        'confirmer' => $o[11],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date_debut' => 'dateDebut',
                        'date_fin' => 'dateFin',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                        'status' => 'status',
                        'description' => 'description',
                        'date_modifier' => 'dateModifier',
                        'date_debut_accorder' => 'dateDebutAccorder',
                        'date_fin_accorder' => 'dateFinAccorder',
                        'confirmer' => 'confirmer',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'dateDebut' => 'date_debut',
                        'dateFin' => 'date_fin',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                        'status' => 'status',
                        'description' => 'description',
                        'dateModifier' => 'date_modifier',
                        'dateDebutAccorder' => 'date_debut_accorder',
                        'dateFinAccorder' => 'date_fin_accorder',
                        'confirmer' => 'confirmer',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'conges',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[12],
                        'type' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[16],
                ],
                'name' => [
                    'App\\Entity\\Conges',
                    13 => 'employe_id',
                    15 => 'type_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'date',
                    'datetime_immutable',
                    'datetime_immutable',
                    'boolean',
                    'text',
                    'boolean',
                    'date',
                    'date',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'dateDebut',
                    'dateFin',
                    'createdAt',
                    'updatedAt',
                    'status',
                    'description',
                    'dateModifier',
                    'dateDebutAccorder',
                    'dateFinAccorder',
                    'confirmer',
                ],
                'columnName' => [
                    1 => 'id',
                    'date_debut',
                    'date_fin',
                    'created_at',
                    'updated_at',
                    'status',
                    'description',
                    'date_modifier',
                    'date_debut_accorder',
                    'date_fin_accorder',
                    'confirmer',
                ],
                'nullable' => [
                    5 => true,
                    true,
                    9 => true,
                    true,
                    true,
                ],
                'fetch' => [
                    12 => 2,
                    14 => 2,
                ],
                'sourceEntity' => [
                    12 => 'App\\Entity\\Conges',
                    14 => 'App\\Entity\\Conges',
                ],
                'inversedBy' => [
                    12 => 'conges',
                    14 => 'conges',
                ],
                'sourceToTargetKeyColumns' => [
                    12 => [
                        'employe_id' => 'id',
                    ],
                    14 => [
                        'type_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    12 => [
                        'id' => 'employe_id',
                    ],
                    14 => [
                        'id' => 'type_id',
                    ],
                ],
                'joinColumns' => [
                    12 => [
                        $o[13],
                    ],
                    14 => [
                        $o[15],
                    ],
                ],
                'joinColumnFieldNames' => [
                    12 => [
                        'employe_id' => 'employe_id',
                    ],
                    14 => [
                        'type_id' => 'type_id',
                    ],
                ],
                'referencedColumnName' => [
                    13 => 'id',
                    15 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    12 => 'employe',
                    14 => 'type',
                ],
                'targetEntity' => [
                    12 => 'App\\Entity\\Employe',
                    14 => 'App\\Entity\\TypeConge',
                ],
            ],
        ],
        $o[0],
        []
    );
},
14 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Contrat',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ContratRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'dateDebut' => $o[2],
                        'dateFin' => $o[3],
                        'salaire' => $o[4],
                        'status' => $o[5],
                        'createdAt' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date_debut' => 'dateDebut',
                        'date_fin' => 'dateFin',
                        'salaire' => 'salaire',
                        'status' => 'status',
                        'created_at' => 'createdAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'dateDebut' => 'date_debut',
                        'dateFin' => 'date_fin',
                        'salaire' => 'salaire',
                        'status' => 'status',
                        'createdAt' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'contrat',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[7],
                        'typecontrat' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Contrat',
                    8 => 'employe_id',
                    10 => 'typecontrat_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                    'datetime',
                    'integer',
                    'boolean',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'dateDebut',
                    'dateFin',
                    'salaire',
                    'status',
                    'createdAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'date_debut',
                    'date_fin',
                    'salaire',
                    'status',
                    'created_at',
                ],
                'nullable' => [
                    3 => true,
                ],
                'cascade' => [
                    7 => [
                        'persist',
                        'remove',
                    ],
                ],
                'fetch' => [
                    7 => 2,
                    9 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Contrat',
                    9 => 'App\\Entity\\Contrat',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'employe_id' => 'id',
                    ],
                    9 => [
                        'typecontrat_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'employe_id',
                    ],
                    9 => [
                        'id' => 'typecontrat_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'employe_id' => 'employe_id',
                    ],
                    9 => [
                        'typecontrat_id' => 'typecontrat_id',
                    ],
                ],
                'unique' => [
                    8 => true,
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    10 => 'id',
                ],
                'inversedBy' => [
                    9 => 'contrats',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'employe',
                    9 => 'typecontrat',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Employe',
                    9 => 'App\\Entity\\TypeContrat',
                ],
            ],
        ],
        $o[0],
        []
    );
},
15 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\CritereEvaluation',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CritereEvaluationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'description' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'critere_evaluation',
                    ],
                ],
                'associationMappings' => [
                    [
                        'evaluations' => $o[4],
                        'evaluationDetails' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\CritereEvaluation',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'description',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'description',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    3 => true,
                ],
                'fetch' => [
                    4 => 2,
                    2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\CritereEvaluation',
                    'App\\Entity\\CritereEvaluation',
                ],
                'mappedBy' => [
                    4 => 'critereEvaluation',
                    'critereEvaluation',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'evaluations',
                    'evaluationDetails',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Evaluation',
                    'App\\Entity\\EvaluationDetail',
                ],
            ],
        ],
        $o[0],
        []
    );
},
16 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\DemandeExplication',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\DemandeExplicationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'objet' => $o[2],
                        'details' => $o[3],
                        'date' => $o[4],
                        'dateIncident' => $o[5],
                        'status' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'objet' => 'objet',
                        'details' => 'details',
                        'date' => 'date',
                        'date_incident' => 'dateIncident',
                        'status' => 'status',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'objet' => 'objet',
                        'details' => 'details',
                        'date' => 'date',
                        'dateIncident' => 'date_incident',
                        'status' => 'status',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'demande_explication',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[7],
                        'reponseExplications' => $o[11],
                        'responsable' => $o[12],
                        'decisions' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\DemandeExplication',
                    8 => 'demande_explication_employe',
                    'demande_explication_id',
                    'employe_id',
                    13 => 'responsable_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'datetime',
                    'datetime',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'objet',
                    'details',
                    'date',
                    'dateIncident',
                    'status',
                ],
                'columnName' => [
                    1 => 'id',
                    'objet',
                    'details',
                    'date',
                    'date_incident',
                    'status',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    7 => 2,
                    11 => 2,
                    2,
                    14 => 2,
                ],
                'isOnDeleteCascade' => [
                    7 => true,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\DemandeExplication',
                    11 => 'App\\Entity\\DemandeExplication',
                    'App\\Entity\\DemandeExplication',
                    14 => 'App\\Entity\\DemandeExplication',
                ],
                'inversedBy' => [
                    7 => 'demandeExplications',
                    12 => 'demandeExplication',
                ],
                'joinTable' => [
                    7 => $o[8],
                ],
                'joinTableColumns' => [
                    7 => [
                        'demande_explication_id',
                        'employe_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    7 => [
                        'demande_explication_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    7 => [
                        'employe_id' => 'id',
                    ],
                ],
                'joinColumns' => [
                    8 => [
                        $o[9],
                    ],
                    12 => [
                        $o[13],
                    ],
                ],
                'inverseJoinColumns' => [
                    8 => [
                        $o[10],
                    ],
                ],
                'onDelete' => [
                    9 => 'CASCADE',
                    'CASCADE',
                ],
                'referencedColumnName' => [
                    9 => 'id',
                    'id',
                    13 => 'id',
                ],
                'mappedBy' => [
                    11 => 'demande',
                    14 => 'explication',
                ],
                'sourceToTargetKeyColumns' => [
                    12 => [
                        'responsable_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    12 => [
                        'id' => 'responsable_id',
                    ],
                ],
                'joinColumnFieldNames' => [
                    12 => [
                        'responsable_id' => 'responsable_id',
                    ],
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'employe',
                    11 => 'reponseExplications',
                    'responsable',
                    14 => 'decisions',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Employe',
                    11 => 'App\\Entity\\ReponseExplication',
                    'App\\Entity\\Employe',
                    14 => 'App\\Entity\\Decision',
                ],
            ],
        ],
        $o[0],
        []
    );
},
17 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Departement',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\DepartementRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'departement',
                    ],
                ],
                'associationMappings' => [
                    [
                        'postes' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Departement',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Departement',
                ],
                'mappedBy' => [
                    3 => 'departement',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'postes',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Poste',
                ],
            ],
        ],
        $o[0],
        []
    );
},
18 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Depense',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\DepenseRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'libelle' => $o[2],
                        'date' => $o[3],
                        'montant' => $o[4],
                        'statut' => $o[5],
                        'numero' => $o[6],
                        'type' => $o[7],
                        'compte' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'libelle' => 'libelle',
                        'date' => 'date',
                        'montant' => 'montant',
                        'statut' => 'statut',
                        'numero' => 'numero',
                        'type' => 'type',
                        'compte' => 'compte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'libelle' => 'libelle',
                        'date' => 'date',
                        'montant' => 'montant',
                        'statut' => 'statut',
                        'numero' => 'numero',
                        'type' => 'type',
                        'compte' => 'compte',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'depense',
                    ],
                ],
                'associationMappings' => [
                    [
                        'categorie' => $o[9],
                        'user' => $o[11],
                        'banque' => $o[13],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\Depense',
                    10 => 'categorie_id',
                    12 => 'user_id',
                    14 => 'banque_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'datetime',
                    'integer',
                    'string',
                    'integer',
                    'string',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'libelle',
                    'date',
                    'montant',
                    'statut',
                    'numero',
                    'type',
                    'compte',
                ],
                'columnName' => [
                    1 => 'id',
                    'libelle',
                    'date',
                    'montant',
                    'statut',
                    'numero',
                    'type',
                    'compte',
                ],
                'length' => [
                    2 => 255,
                    5 => 255,
                    7 => 255,
                ],
                'nullable' => [
                    6 => true,
                    14 => true,
                ],
                'fetch' => [
                    9 => 2,
                    11 => 2,
                    13 => 2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\Depense',
                    11 => 'App\\Entity\\Depense',
                    13 => 'App\\Entity\\Depense',
                ],
                'inversedBy' => [
                    9 => 'depenses',
                    11 => 'depenses',
                    13 => 'depenses',
                ],
                'sourceToTargetKeyColumns' => [
                    9 => [
                        'categorie_id' => 'id',
                    ],
                    11 => [
                        'user_id' => 'id',
                    ],
                    13 => [
                        'banque_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    9 => [
                        'id' => 'categorie_id',
                    ],
                    11 => [
                        'id' => 'user_id',
                    ],
                    13 => [
                        'id' => 'banque_id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                    13 => [
                        $o[14],
                    ],
                ],
                'joinColumnFieldNames' => [
                    9 => [
                        'categorie_id' => 'categorie_id',
                    ],
                    11 => [
                        'user_id' => 'user_id',
                    ],
                    13 => [
                        'banque_id' => 'banque_id',
                    ],
                ],
                'referencedColumnName' => [
                    10 => 'id',
                    12 => 'id',
                    14 => 'id',
                ],
                'unique' => [
                    14 => false,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'categorie',
                    11 => 'user',
                    13 => 'banque',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\Categorie',
                    11 => 'App\\Entity\\Employe',
                    13 => 'App\\Entity\\Banque',
                ],
            ],
        ],
        $o[0],
        []
    );
},
19 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\DiscriminatorColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\DiscriminatorColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'parentClasses' => [
                    [
                        'App\\Entity\\User',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'inheritanceType' => [
                    2,
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'username' => $o[2],
                        'password' => $o[3],
                        'email' => $o[4],
                        'prenom' => $o[5],
                        'nom' => $o[6],
                        'phone' => $o[7],
                        'adresse' => $o[8],
                        'fonction' => $o[9],
                        'roles' => $o[10],
                        'resetToken' => $o[11],
                        'enabled' => $o[12],
                        'client' => $o[13],
                        'livreur' => $o[14],
                        'hireDate' => $o[15],
                        'dateNaissance' => $o[16],
                        'lieuNaissance' => $o[17],
                        'sexe' => $o[18],
                        'civilite' => $o[19],
                        'nationalite' => $o[20],
                        'matricule' => $o[21],
                        'famillyname' => $o[22],
                        'famillylink' => $o[23],
                        'famillyphone' => $o[24],
                        'bloodgroup' => $o[25],
                        'diabete' => $o[26],
                        'handicap' => $o[27],
                        'hypo' => $o[28],
                        'hyper' => $o[29],
                        'epilepsie' => $o[30],
                        'remark' => $o[31],
                        'enfant' => $o[32],
                        'status' => $o[33],
                        'NombreJoursConges' => $o[34],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'username' => 'username',
                        'password' => 'password',
                        'email' => 'email',
                        'prenom' => 'prenom',
                        'nom' => 'nom',
                        'phone' => 'phone',
                        'adresse' => 'adresse',
                        'fonction' => 'fonction',
                        'roles' => 'roles',
                        'reset_token' => 'resetToken',
                        'enabled' => 'enabled',
                        'client' => 'client',
                        'livreur' => 'livreur',
                        'hire_date' => 'hireDate',
                        'date_naissance' => 'dateNaissance',
                        'lieu_naissance' => 'lieuNaissance',
                        'sexe' => 'sexe',
                        'civilite' => 'civilite',
                        'nationalite' => 'nationalite',
                        'matricule' => 'matricule',
                        'famillyname' => 'famillyname',
                        'famillylink' => 'famillylink',
                        'famillyphone' => 'famillyphone',
                        'bloodgroup' => 'bloodgroup',
                        'diabete' => 'diabete',
                        'handicap' => 'handicap',
                        'hypo' => 'hypo',
                        'hyper' => 'hyper',
                        'epilepsie' => 'epilepsie',
                        'remark' => 'remark',
                        'enfant' => 'enfant',
                        'status' => 'status',
                        'nombre_jours_conges' => 'NombreJoursConges',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'username' => 'username',
                        'password' => 'password',
                        'email' => 'email',
                        'prenom' => 'prenom',
                        'nom' => 'nom',
                        'phone' => 'phone',
                        'adresse' => 'adresse',
                        'fonction' => 'fonction',
                        'roles' => 'roles',
                        'resetToken' => 'reset_token',
                        'enabled' => 'enabled',
                        'client' => 'client',
                        'livreur' => 'livreur',
                        'hireDate' => 'hire_date',
                        'dateNaissance' => 'date_naissance',
                        'lieuNaissance' => 'lieu_naissance',
                        'sexe' => 'sexe',
                        'civilite' => 'civilite',
                        'nationalite' => 'nationalite',
                        'matricule' => 'matricule',
                        'famillyname' => 'famillyname',
                        'famillylink' => 'famillylink',
                        'famillyphone' => 'famillyphone',
                        'bloodgroup' => 'bloodgroup',
                        'diabete' => 'diabete',
                        'handicap' => 'handicap',
                        'hypo' => 'hypo',
                        'hyper' => 'hyper',
                        'epilepsie' => 'epilepsie',
                        'remark' => 'remark',
                        'enfant' => 'enfant',
                        'status' => 'status',
                        'NombreJoursConges' => 'nombre_jours_conges',
                    ],
                ],
                'discriminatorValue' => [
                    'employe',
                ],
                'discriminatorMap' => [
                    [
                        'client' => 'App\\Entity\\Client',
                        'employe' => 'App\\Entity\\Employe',
                    ],
                ],
                'discriminatorColumn' => [
                    $o[35],
                ],
                'table' => [
                    [
                        'name' => 'employe',
                    ],
                ],
                'associationMappings' => [
                    [
                        'transferts' => $o[36],
                        'depenses' => $o[37],
                        'sent' => $o[38],
                        'received' => $o[39],
                        'poste' => $o[40],
                        'posteEmployes' => $o[42],
                        'employeFormations' => $o[43],
                        'formations' => $o[44],
                        'conges' => $o[45],
                        'absences' => $o[46],
                        'demandeExplications' => $o[47],
                        'reponseExplications' => $o[48],
                        'demandeExplication' => $o[49],
                        'absence' => $o[50],
                        'decisions' => $o[51],
                        'sanctions' => $o[52],
                        'paies' => $o[53],
                        'heureSuplementaires' => $o[54],
                        'primes' => $o[55],
                        'retenues' => $o[56],
                        'calendriers' => $o[57],
                        'contrat' => $o[58],
                        'messageReplies' => $o[60],
                        'documents' => $o[61],
                        'evaluations' => $o[62],
                        'feedback' => $o[63],
                        'notifications' => $o[64],
                        'noteServices' => $o[65],
                        'noteService' => $o[66],
                        'paieSalaires' => $o[67],
                        'primePerformances' => $o[68],
                    ],
                ],
                'idGenerator' => [
                    $o[69],
                ],
                'name' => [
                    'App\\Entity\\Employe',
                    35 => 'typeuser',
                    41 => 'poste_id',
                    59 => 'contrat_id',
                ],
                'id' => [
                    1 => true,
                ],
                'inherited' => [
                    1 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    36 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'declared' => [
                    1 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    36 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'array',
                    'string',
                    'boolean',
                    'boolean',
                    'boolean',
                    'date',
                    'date',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'boolean',
                    'boolean',
                    'boolean',
                    'boolean',
                    'boolean',
                    'text',
                    'integer',
                    'boolean',
                    'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'username',
                    'password',
                    'email',
                    'prenom',
                    'nom',
                    'phone',
                    'adresse',
                    'fonction',
                    'roles',
                    'resetToken',
                    'enabled',
                    'client',
                    'livreur',
                    'hireDate',
                    'dateNaissance',
                    'lieuNaissance',
                    'sexe',
                    'civilite',
                    'nationalite',
                    'matricule',
                    'famillyname',
                    'famillylink',
                    'famillyphone',
                    'bloodgroup',
                    'diabete',
                    'handicap',
                    'hypo',
                    'hyper',
                    'epilepsie',
                    'remark',
                    'enfant',
                    'status',
                    'NombreJoursConges',
                    'typeuser',
                ],
                'columnName' => [
                    1 => 'id',
                    'username',
                    'password',
                    'email',
                    'prenom',
                    'nom',
                    'phone',
                    'adresse',
                    'fonction',
                    'roles',
                    'reset_token',
                    'enabled',
                    'client',
                    'livreur',
                    'hire_date',
                    'date_naissance',
                    'lieu_naissance',
                    'sexe',
                    'civilite',
                    'nationalite',
                    'matricule',
                    'famillyname',
                    'famillylink',
                    'famillyphone',
                    'bloodgroup',
                    'diabete',
                    'handicap',
                    'hypo',
                    'hyper',
                    'epilepsie',
                    'remark',
                    'enfant',
                    'status',
                    'nombre_jours_conges',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    11 => 255,
                    17 => 255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    35 => 255,
                ],
                'nullable' => [
                    2 => true,
                    5 => true,
                    true,
                    8 => true,
                    10 => true,
                    true,
                    25 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                ],
                'fetch' => [
                    36 => 2,
                    2,
                    2,
                    2,
                    2,
                    42 => 2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    60 => 2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    36 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\Employe',
                    42 => 'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    60 => 'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                    'App\\Entity\\Employe',
                ],
                'mappedBy' => [
                    36 => 'user',
                    'user',
                    'sender',
                    'recipient',
                    42 => 'employe',
                    'employe',
                    'employe',
                    'employe',
                    'employe',
                    'employe',
                    'employe',
                    'responsable',
                    'responsable',
                    'responsable',
                    'employe',
                    'employe',
                    'employe',
                    'employe',
                    'employe',
                    'employe',
                    60 => 'sender',
                    'employe',
                    'employe',
                    'employe',
                    'employe',
                    'responsable',
                    'employe',
                    'employe',
                    'employe',
                ],
                'cascade' => [
                    38 => [
                        'remove',
                    ],
                    [
                        'remove',
                    ],
                    58 => [
                        'persist',
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    38 => true,
                    true,
                ],
                'inversedBy' => [
                    40 => 'employes',
                ],
                'sourceToTargetKeyColumns' => [
                    40 => [
                        'poste_id' => 'id',
                    ],
                    58 => [
                        'contrat_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    40 => [
                        'id' => 'poste_id',
                    ],
                    58 => [
                        'id' => 'contrat_id',
                    ],
                ],
                'joinColumns' => [
                    40 => [
                        $o[41],
                    ],
                    58 => [
                        $o[59],
                    ],
                ],
                'joinColumnFieldNames' => [
                    40 => [
                        'poste_id' => 'poste_id',
                    ],
                    58 => [
                        'contrat_id' => 'contrat_id',
                    ],
                ],
                'referencedColumnName' => [
                    41 => 'id',
                    59 => 'id',
                ],
                'unique' => [
                    59 => true,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    36 => 'transferts',
                    'depenses',
                    'sent',
                    'received',
                    'poste',
                    42 => 'posteEmployes',
                    'employeFormations',
                    'formations',
                    'conges',
                    'absences',
                    'demandeExplications',
                    'reponseExplications',
                    'demandeExplication',
                    'absence',
                    'decisions',
                    'sanctions',
                    'paies',
                    'heureSuplementaires',
                    'primes',
                    'retenues',
                    'calendriers',
                    'contrat',
                    60 => 'messageReplies',
                    'documents',
                    'evaluations',
                    'feedback',
                    'notifications',
                    'noteServices',
                    'noteService',
                    'paieSalaires',
                    'primePerformances',
                ],
                'targetEntity' => [
                    36 => 'App\\Entity\\Transfert',
                    'App\\Entity\\Depense',
                    'App\\Entity\\Message',
                    'App\\Entity\\MessageRecipient',
                    'App\\Entity\\Poste',
                    42 => 'App\\Entity\\PosteEmploye',
                    'App\\Entity\\EmployeFormation',
                    'App\\Entity\\Formation',
                    'App\\Entity\\Conges',
                    'App\\Entity\\Absence',
                    'App\\Entity\\DemandeExplication',
                    'App\\Entity\\ReponseExplication',
                    'App\\Entity\\DemandeExplication',
                    'App\\Entity\\Absence',
                    'App\\Entity\\Decision',
                    'App\\Entity\\Sanction',
                    'App\\Entity\\Paie',
                    'App\\Entity\\HeureSuplementaire',
                    'App\\Entity\\Prime',
                    'App\\Entity\\Retenue',
                    'App\\Entity\\Calendrier',
                    'App\\Entity\\Contrat',
                    60 => 'App\\Entity\\MessageReply',
                    'App\\Entity\\Document',
                    'App\\Entity\\Evaluation',
                    'App\\Entity\\Feedback',
                    'App\\Entity\\Notification',
                    'App\\Entity\\NoteService',
                    'App\\Entity\\NoteService',
                    'App\\Entity\\PaieSalaire',
                    'App\\Entity\\PrimePerformance',
                ],
            ],
        ],
        $o[0],
        []
    );
},
20 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Document',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\DocumentRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'filePath' => $o[2],
                        'createdAt' => $o[3],
                        'fileName' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'file_path' => 'filePath',
                        'created_at' => 'createdAt',
                        'file_name' => 'fileName',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'filePath' => 'file_path',
                        'createdAt' => 'created_at',
                        'fileName' => 'file_name',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'document',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\Document',
                    6 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'datetime',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'filePath',
                    'createdAt',
                    'fileName',
                ],
                'columnName' => [
                    1 => 'id',
                    'file_path',
                    'created_at',
                    'file_name',
                ],
                'length' => [
                    2 => 255,
                    4 => 255,
                ],
                'nullable' => [
                    4 => true,
                ],
                'fetch' => [
                    5 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\Document',
                ],
                'inversedBy' => [
                    5 => 'documents',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    6 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'employe',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
21 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Evaluation',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\EvaluationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'dateEvaluation' => $o[2],
                        'moyenne' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date_evaluation' => 'dateEvaluation',
                        'moyenne' => 'moyenne',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'dateEvaluation' => 'date_evaluation',
                        'moyenne' => 'moyenne',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'evaluation',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[4],
                        'critereEvaluation' => $o[6],
                        'evaluationDetails' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Evaluation',
                    5 => 'employe_id',
                    7 => 'critere_evaluation_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'float',
                ],
                'fieldName' => [
                    1 => 'id',
                    'dateEvaluation',
                    'moyenne',
                ],
                'columnName' => [
                    1 => 'id',
                    'date_evaluation',
                    'moyenne',
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                    8 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Evaluation',
                    6 => 'App\\Entity\\Evaluation',
                    8 => 'App\\Entity\\Evaluation',
                ],
                'inversedBy' => [
                    4 => 'evaluations',
                    6 => 'evaluations',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'employe_id' => 'id',
                    ],
                    6 => [
                        'critere_evaluation_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'employe_id',
                    ],
                    6 => [
                        'id' => 'critere_evaluation_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'employe_id' => 'employe_id',
                    ],
                    6 => [
                        'critere_evaluation_id' => 'critere_evaluation_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
                'mappedBy' => [
                    8 => 'evaluation',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'employe',
                    6 => 'critereEvaluation',
                    8 => 'evaluationDetails',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Employe',
                    6 => 'App\\Entity\\CritereEvaluation',
                    8 => 'App\\Entity\\EvaluationDetail',
                ],
            ],
        ],
        $o[0],
        []
    );
},
22 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Feedback',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\FeedbackRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'commentaire' => $o[2],
                        'createdAt' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'commentaire' => 'commentaire',
                        'created_at' => 'createdAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'commentaire' => 'commentaire',
                        'createdAt' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'feedback',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Feedback',
                    5 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'commentaire',
                    'createdAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'commentaire',
                    'created_at',
                ],
                'fetch' => [
                    4 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Feedback',
                ],
                'inversedBy' => [
                    4 => 'feedback',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'employe',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
23 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Financement',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\FinancementRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'motif' => $o[2],
                        'montant' => $o[3],
                        'date' => $o[4],
                        'Type' => $o[5],
                        'numero' => $o[6],
                        'compte' => $o[7],
                        'apport' => $o[8],
                        'taux' => $o[9],
                        'compteinteret' => $o[10],
                        'libellecompte' => $o[11],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'motif' => 'motif',
                        'montant' => 'montant',
                        'date' => 'date',
                        'type' => 'Type',
                        'numero' => 'numero',
                        'compte' => 'compte',
                        'apport' => 'apport',
                        'taux' => 'taux',
                        'compteinteret' => 'compteinteret',
                        'libellecompte' => 'libellecompte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'motif' => 'motif',
                        'montant' => 'montant',
                        'date' => 'date',
                        'Type' => 'type',
                        'numero' => 'numero',
                        'compte' => 'compte',
                        'apport' => 'apport',
                        'taux' => 'taux',
                        'compteinteret' => 'compteinteret',
                        'libellecompte' => 'libellecompte',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'financement',
                    ],
                ],
                'associationMappings' => [
                    [
                        'remboursements' => $o[12],
                        'banque' => $o[13],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\Financement',
                    14 => 'banque_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'integer',
                    'datetime',
                    'string',
                    'integer',
                    'string',
                    'boolean',
                    'float',
                    'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'motif',
                    'montant',
                    'date',
                    'Type',
                    'numero',
                    'compte',
                    'apport',
                    'taux',
                    'compteinteret',
                    'libellecompte',
                ],
                'columnName' => [
                    1 => 'id',
                    'motif',
                    'montant',
                    'date',
                    'type',
                    'numero',
                    'compte',
                    'apport',
                    'taux',
                    'compteinteret',
                    'libellecompte',
                ],
                'length' => [
                    2 => 255,
                    5 => 255,
                    7 => 255,
                    11 => 255,
                ],
                'nullable' => [
                    6 => true,
                    true,
                    10 => true,
                    true,
                    14 => true,
                ],
                'fetch' => [
                    12 => 2,
                    2,
                ],
                'sourceEntity' => [
                    12 => 'App\\Entity\\Financement',
                    'App\\Entity\\Financement',
                ],
                'mappedBy' => [
                    12 => 'financement',
                ],
                'inversedBy' => [
                    13 => 'financements',
                ],
                'sourceToTargetKeyColumns' => [
                    13 => [
                        'banque_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    13 => [
                        'id' => 'banque_id',
                    ],
                ],
                'joinColumns' => [
                    13 => [
                        $o[14],
                    ],
                ],
                'joinColumnFieldNames' => [
                    13 => [
                        'banque_id' => 'banque_id',
                    ],
                ],
                'unique' => [
                    14 => false,
                ],
                'referencedColumnName' => [
                    14 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    12 => 'remboursements',
                    'banque',
                ],
                'targetEntity' => [
                    12 => 'App\\Entity\\Remboursement',
                    'App\\Entity\\Banque',
                ],
            ],
        ],
        $o[0],
        []
    );
},
24 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Formation',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\FormationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'datedebut' => $o[3],
                        'datefin' => $o[4],
                        'contenu' => $o[5],
                        'lieu' => $o[6],
                        'type' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'datedebut' => 'datedebut',
                        'datefin' => 'datefin',
                        'contenu' => 'contenu',
                        'lieu' => 'lieu',
                        'type' => 'type',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'datedebut' => 'datedebut',
                        'datefin' => 'datefin',
                        'contenu' => 'contenu',
                        'lieu' => 'lieu',
                        'type' => 'type',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'formation',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employeFormations' => $o[8],
                        'employe' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[13],
                ],
                'name' => [
                    'App\\Entity\\Formation',
                    10 => 'formation_employe',
                    'formation_id',
                    'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'datetime',
                    'datetime',
                    'text',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'datedebut',
                    'datefin',
                    'contenu',
                    'lieu',
                    'type',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'datedebut',
                    'datefin',
                    'contenu',
                    'lieu',
                    'type',
                ],
                'length' => [
                    2 => 255,
                    6 => 255,
                    255,
                ],
                'nullable' => [
                    4 => true,
                ],
                'fetch' => [
                    8 => 2,
                    2,
                ],
                'sourceEntity' => [
                    8 => 'App\\Entity\\Formation',
                    'App\\Entity\\Formation',
                ],
                'mappedBy' => [
                    8 => 'formation',
                ],
                'isOnDeleteCascade' => [
                    9 => true,
                ],
                'inversedBy' => [
                    9 => 'formations',
                ],
                'joinTable' => [
                    9 => $o[10],
                ],
                'joinTableColumns' => [
                    9 => [
                        'formation_id',
                        'employe_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    9 => [
                        'formation_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    9 => [
                        'employe_id' => 'id',
                    ],
                ],
                'joinColumns' => [
                    10 => [
                        $o[11],
                    ],
                ],
                'inverseJoinColumns' => [
                    10 => [
                        $o[12],
                    ],
                ],
                'onDelete' => [
                    11 => 'CASCADE',
                    'CASCADE',
                ],
                'referencedColumnName' => [
                    11 => 'id',
                    'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    8 => 'employeFormations',
                    'employe',
                ],
                'targetEntity' => [
                    8 => 'App\\Entity\\EmployeFormation',
                    'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
25 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Fournisseur',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\FournisseurRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'adresse' => $o[2],
                        'email' => $o[3],
                        'pays' => $o[4],
                        'telephone' => $o[5],
                        'designation' => $o[6],
                        'compte' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'adresse' => 'adresse',
                        'email' => 'email',
                        'pays' => 'pays',
                        'telephone' => 'telephone',
                        'designation' => 'designation',
                        'compte' => 'compte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'adresse' => 'adresse',
                        'email' => 'email',
                        'pays' => 'pays',
                        'telephone' => 'telephone',
                        'designation' => 'designation',
                        'compte' => 'compte',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'fournisseur',
                    ],
                ],
                'associationMappings' => [
                    [
                        'achats' => $o[8],
                        'approvisionnements' => $o[9],
                        'factures' => $o[10],
                        'produits' => $o[11],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\Fournisseur',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'adresse',
                    'email',
                    'pays',
                    'telephone',
                    'designation',
                    'compte',
                ],
                'columnName' => [
                    1 => 'id',
                    'adresse',
                    'email',
                    'pays',
                    'telephone',
                    'designation',
                    'compte',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    6 => 255,
                    255,
                ],
                'fetch' => [
                    8 => 2,
                    2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    8 => 'App\\Entity\\Fournisseur',
                    'App\\Entity\\Fournisseur',
                    'App\\Entity\\Fournisseur',
                    'App\\Entity\\Fournisseur',
                ],
                'mappedBy' => [
                    8 => 'fournisseur',
                    'fournisseur',
                    'fournisseur',
                    'fournisseurs',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    8 => 'achats',
                    'approvisionnements',
                    'factures',
                    'produits',
                ],
                'targetEntity' => [
                    8 => 'App\\Entity\\Achat',
                    'App\\Entity\\Approvisionnement',
                    'App\\Entity\\Facture',
                    'App\\Entity\\Produit',
                ],
            ],
        ],
        $o[0],
        []
    );
},
26 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\HeureSuplementaire',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\HeureSuplementaireRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'duree' => $o[2],
                        'tauxHoraire' => $o[3],
                        'createdAt' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'duree' => 'duree',
                        'taux_horaire' => 'tauxHoraire',
                        'created_at' => 'createdAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'duree' => 'duree',
                        'tauxHoraire' => 'taux_horaire',
                        'createdAt' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'heure_suplementaire',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\HeureSuplementaire',
                    6 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'float',
                    'integer',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'duree',
                    'tauxHoraire',
                    'createdAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'duree',
                    'taux_horaire',
                    'created_at',
                ],
                'fetch' => [
                    5 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\HeureSuplementaire',
                ],
                'inversedBy' => [
                    5 => 'heureSuplementaires',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    6 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'employe',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
27 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Livrer',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\LivrerRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'reste' => $o[3],
                        'livrer' => $o[4],
                        'dateefectlivraison' => $o[5],
                        'signature' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'reste' => 'reste',
                        'livrer' => 'livrer',
                        'dateefectlivraison' => 'dateefectlivraison',
                        'signature' => 'signature',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'reste' => 'reste',
                        'livrer' => 'livrer',
                        'dateefectlivraison' => 'dateefectlivraison',
                        'signature' => 'signature',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'livrer',
                    ],
                ],
                'associationMappings' => [
                    [
                        'livraison' => $o[7],
                        'user' => $o[8],
                        'retour' => $o[10],
                        'livreur' => $o[12],
                        'commande' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[16],
                ],
                'name' => [
                    'App\\Entity\\Livrer',
                    9 => 'user_id',
                    11 => 'retour_id',
                    13 => 'livreur_id',
                    15 => 'commande_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'boolean',
                    'boolean',
                    'datetime',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'reste',
                    'livrer',
                    'dateefectlivraison',
                    'signature',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'reste',
                    'livrer',
                    'dateefectlivraison',
                    'signature',
                ],
                'nullable' => [
                    5 => true,
                    true,
                    9 => false,
                    11 => true,
                    13 => false,
                    15 => false,
                ],
                'length' => [
                    6 => 255,
                ],
                'fetch' => [
                    7 => 2,
                    2,
                    10 => 2,
                    12 => 2,
                    14 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Livrer',
                    'App\\Entity\\Livrer',
                    10 => 'App\\Entity\\Livrer',
                    12 => 'App\\Entity\\Livrer',
                    14 => 'App\\Entity\\Livrer',
                ],
                'mappedBy' => [
                    7 => 'livrer',
                ],
                'sourceToTargetKeyColumns' => [
                    8 => [
                        'user_id' => 'id',
                    ],
                    10 => [
                        'retour_id' => 'id',
                    ],
                    12 => [
                        'livreur_id' => 'id',
                    ],
                    14 => [
                        'commande_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    8 => [
                        'id' => 'user_id',
                    ],
                    10 => [
                        'id' => 'retour_id',
                    ],
                    12 => [
                        'id' => 'livreur_id',
                    ],
                    14 => [
                        'id' => 'commande_id',
                    ],
                ],
                'joinColumns' => [
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                    12 => [
                        $o[13],
                    ],
                    14 => [
                        $o[15],
                    ],
                ],
                'joinColumnFieldNames' => [
                    8 => [
                        'user_id' => 'user_id',
                    ],
                    10 => [
                        'retour_id' => 'retour_id',
                    ],
                    12 => [
                        'livreur_id' => 'livreur_id',
                    ],
                    14 => [
                        'commande_id' => 'commande_id',
                    ],
                ],
                'unique' => [
                    9 => false,
                    11 => false,
                    13 => false,
                    15 => false,
                ],
                'referencedColumnName' => [
                    9 => 'id',
                    11 => 'id',
                    13 => 'id',
                    15 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'livraison',
                    'user',
                    10 => 'retour',
                    12 => 'livreur',
                    14 => 'commande',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\LivrerProduit',
                    'App\\Entity\\Employe',
                    10 => 'App\\Entity\\Retour',
                    12 => 'App\\Entity\\Employe',
                    14 => 'App\\Entity\\Commande',
                ],
            ],
        ],
        $o[0],
        []
    );
},
28 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Retour',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\RetourRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'retour',
                    ],
                ],
                'associationMappings' => [
                    [
                        'commande' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Retour',
                    4 => 'commande_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Retour',
                ],
                'sourceToTargetKeyColumns' => [
                    3 => [
                        'commande_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    3 => [
                        'id' => 'commande_id',
                    ],
                ],
                'joinColumns' => [
                    3 => [
                        $o[4],
                    ],
                ],
                'joinColumnFieldNames' => [
                    3 => [
                        'commande_id' => 'commande_id',
                    ],
                ],
                'unique' => [
                    4 => false,
                ],
                'nullable' => [
                    4 => false,
                ],
                'referencedColumnName' => [
                    4 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'commande',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Commande',
                ],
            ],
        ],
        $o[0],
        []
    );
},
29 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\MessageRecipient',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\MessageRecipientRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'message_recipient',
                    ],
                ],
                'idGenerator' => [
                    $o[2],
                ],
                'name' => [
                    'App\\Entity\\MessageRecipient',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                ],
                'columnName' => [
                    1 => 'id',
                ],
            ],
        ],
        $o[0],
        []
    );
},
30 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Message',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\MessageRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'message' => $o[3],
                        'created_at' => $o[4],
                        'deletedAt' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'message' => 'message',
                        'created_at' => 'created_at',
                        'deleted_at' => 'deletedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'message' => 'message',
                        'created_at' => 'created_at',
                        'deletedAt' => 'deleted_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'message',
                    ],
                ],
                'associationMappings' => [
                    [
                        'sender' => $o[6],
                        'recipients' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Message',
                    7 => 'sender_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'datetime',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'message',
                    'created_at',
                    'deletedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'message',
                    'created_at',
                    'deleted_at',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    5 => true,
                    7 => false,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Message',
                    8 => 'App\\Entity\\Message',
                ],
                'inversedBy' => [
                    6 => 'sent',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'sender_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'sender_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'sender_id' => 'sender_id',
                    ],
                ],
                'unique' => [
                    7 => false,
                ],
                'referencedColumnName' => [
                    7 => 'id',
                ],
                'cascade' => [
                    8 => [
                        'persist',
                        'remove',
                    ],
                ],
                'mappedBy' => [
                    8 => 'message',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'sender',
                    8 => 'recipients',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Employe',
                    8 => 'App\\Entity\\MessageRecipient',
                ],
            ],
        ],
        $o[0],
        []
    );
},
31 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\NoteService',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\NoteServiceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'objet' => $o[2],
                        'detail' => $o[3],
                        'dateDebut' => $o[4],
                        'dateFin' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'objet' => 'objet',
                        'detail' => 'detail',
                        'date_debut' => 'dateDebut',
                        'date_fin' => 'dateFin',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'objet' => 'objet',
                        'detail' => 'detail',
                        'dateDebut' => 'date_debut',
                        'dateFin' => 'date_fin',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'note_service',
                    ],
                ],
                'associationMappings' => [
                    [
                        'responsable' => $o[6],
                        'employe' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\NoteService',
                    7 => 'responsable_id',
                    9 => 'note_service_employe',
                    'note_service_id',
                    'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'datetime',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'objet',
                    'detail',
                    'dateDebut',
                    'dateFin',
                ],
                'columnName' => [
                    1 => 'id',
                    'objet',
                    'detail',
                    'date_debut',
                    'date_fin',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    5 => true,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\NoteService',
                    8 => 'App\\Entity\\NoteService',
                ],
                'inversedBy' => [
                    6 => 'noteServices',
                    8 => 'noteService',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'responsable_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'responsable_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    9 => [
                        $o[10],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'responsable_id' => 'responsable_id',
                    ],
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    10 => 'id',
                    'id',
                ],
                'isOnDeleteCascade' => [
                    8 => true,
                ],
                'joinTable' => [
                    8 => $o[9],
                ],
                'joinTableColumns' => [
                    8 => [
                        'note_service_id',
                        'employe_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    8 => [
                        'note_service_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    8 => [
                        'employe_id' => 'id',
                    ],
                ],
                'inverseJoinColumns' => [
                    9 => [
                        $o[11],
                    ],
                ],
                'onDelete' => [
                    10 => 'CASCADE',
                    'CASCADE',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'responsable',
                    8 => 'employe',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Employe',
                    8 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
32 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Paie',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PaieRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'salaireBase' => $o[3],
                        'salaireNet' => $o[4],
                        'totalPrime' => $o[5],
                        'totalheureSup' => $o[6],
                        'totalRetenue' => $o[7],
                        'detailsRetenues' => $o[8],
                        'impot' => $o[9],
                        'payer' => $o[10],
                        'datepaye' => $o[11],
                        'salaireBrut' => $o[12],
                        'salaireNetImposable' => $o[13],
                        'totalChargeEmploye' => $o[14],
                        'totalChargePatronal' => $o[15],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'salaire_base' => 'salaireBase',
                        'salaire_net' => 'salaireNet',
                        'total_prime' => 'totalPrime',
                        'totalheure_sup' => 'totalheureSup',
                        'total_retenue' => 'totalRetenue',
                        'details_retenues' => 'detailsRetenues',
                        'impot' => 'impot',
                        'payer' => 'payer',
                        'datepaye' => 'datepaye',
                        'salaire_brut' => 'salaireBrut',
                        'salaire_net_imposable' => 'salaireNetImposable',
                        'total_charge_employe' => 'totalChargeEmploye',
                        'total_charge_patronal' => 'totalChargePatronal',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'salaireBase' => 'salaire_base',
                        'salaireNet' => 'salaire_net',
                        'totalPrime' => 'total_prime',
                        'totalheureSup' => 'totalheure_sup',
                        'totalRetenue' => 'total_retenue',
                        'detailsRetenues' => 'details_retenues',
                        'impot' => 'impot',
                        'payer' => 'payer',
                        'datepaye' => 'datepaye',
                        'salaireBrut' => 'salaire_brut',
                        'salaireNetImposable' => 'salaire_net_imposable',
                        'totalChargeEmploye' => 'total_charge_employe',
                        'totalChargePatronal' => 'total_charge_patronal',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'paie',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[16],
                        'retenues' => $o[18],
                        'mois' => $o[19],
                    ],
                ],
                'idGenerator' => [
                    $o[21],
                ],
                'name' => [
                    'App\\Entity\\Paie',
                    17 => 'employe_id',
                    20 => 'mois_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'text',
                    'float',
                    'boolean',
                    'date',
                    'float',
                    'float',
                    'float',
                    'float',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'salaireBase',
                    'salaireNet',
                    'totalPrime',
                    'totalheureSup',
                    'totalRetenue',
                    'detailsRetenues',
                    'impot',
                    'payer',
                    'datepaye',
                    'salaireBrut',
                    'salaireNetImposable',
                    'totalChargeEmploye',
                    'totalChargePatronal',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'salaire_base',
                    'salaire_net',
                    'total_prime',
                    'totalheure_sup',
                    'total_retenue',
                    'details_retenues',
                    'impot',
                    'payer',
                    'datepaye',
                    'salaire_brut',
                    'salaire_net_imposable',
                    'total_charge_employe',
                    'total_charge_patronal',
                ],
                'nullable' => [
                    8 => true,
                    11 => true,
                    true,
                    true,
                    true,
                    true,
                ],
                'fetch' => [
                    16 => 2,
                    18 => 2,
                    2,
                ],
                'sourceEntity' => [
                    16 => 'App\\Entity\\Paie',
                    18 => 'App\\Entity\\Paie',
                    'App\\Entity\\Paie',
                ],
                'inversedBy' => [
                    16 => 'paies',
                    19 => 'paies',
                ],
                'sourceToTargetKeyColumns' => [
                    16 => [
                        'employe_id' => 'id',
                    ],
                    19 => [
                        'mois_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    16 => [
                        'id' => 'employe_id',
                    ],
                    19 => [
                        'id' => 'mois_id',
                    ],
                ],
                'joinColumns' => [
                    16 => [
                        $o[17],
                    ],
                    19 => [
                        $o[20],
                    ],
                ],
                'joinColumnFieldNames' => [
                    16 => [
                        'employe_id' => 'employe_id',
                    ],
                    19 => [
                        'mois_id' => 'mois_id',
                    ],
                ],
                'referencedColumnName' => [
                    17 => 'id',
                    20 => 'id',
                ],
                'mappedBy' => [
                    18 => 'paie',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    16 => 'employe',
                    18 => 'retenues',
                    'mois',
                ],
                'targetEntity' => [
                    16 => 'App\\Entity\\Employe',
                    18 => 'App\\Entity\\Retenue',
                    'App\\Entity\\Mois',
                ],
            ],
        ],
        $o[0],
        []
    );
},
33 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Produit',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ProduitRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'reference' => $o[2],
                        'desigantion' => $o[3],
                        'adresse' => $o[4],
                        'telephone' => $o[5],
                        'description' => $o[6],
                        'prix' => $o[7],
                        'mincommande' => $o[8],
                        'fabriquant' => $o[9],
                        'prixpublic' => $o[10],
                        'stock' => $o[11],
                        'creation' => $o[12],
                        'tva' => $o[13],
                        'pght' => $o[14],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'reference' => 'reference',
                        'desigantion' => 'desigantion',
                        'adresse' => 'adresse',
                        'telephone' => 'telephone',
                        'description' => 'description',
                        'prix' => 'prix',
                        'mincommande' => 'mincommande',
                        'fabriquant' => 'fabriquant',
                        'prixpublic' => 'prixpublic',
                        'stock' => 'stock',
                        'creation' => 'creation',
                        'tva' => 'tva',
                        'pght' => 'pght',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'reference' => 'reference',
                        'desigantion' => 'desigantion',
                        'adresse' => 'adresse',
                        'telephone' => 'telephone',
                        'description' => 'description',
                        'prix' => 'prix',
                        'mincommande' => 'mincommande',
                        'fabriquant' => 'fabriquant',
                        'prixpublic' => 'prixpublic',
                        'stock' => 'stock',
                        'creation' => 'creation',
                        'tva' => 'tva',
                        'pght' => 'pght',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'produit',
                    ],
                ],
                'associationMappings' => [
                    [
                        'promotion' => $o[15],
                        'fournisseurs' => $o[17],
                        'promotionProduits' => $o[21],
                        'commandeProduits' => $o[22],
                    ],
                ],
                'idGenerator' => [
                    $o[23],
                ],
                'name' => [
                    'App\\Entity\\Produit',
                    16 => 'promotion_id',
                    18 => 'produit_fournisseur',
                    'produit_id',
                    'fournisseur_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'string',
                    'string',
                    'integer',
                    'integer',
                    'date',
                    'boolean',
                    'float',
                ],
                'fieldName' => [
                    1 => 'id',
                    'reference',
                    'desigantion',
                    'adresse',
                    'telephone',
                    'description',
                    'prix',
                    'mincommande',
                    'fabriquant',
                    'prixpublic',
                    'stock',
                    'creation',
                    'tva',
                    'pght',
                ],
                'columnName' => [
                    1 => 'id',
                    'reference',
                    'desigantion',
                    'adresse',
                    'telephone',
                    'description',
                    'prix',
                    'mincommande',
                    'fabriquant',
                    'prixpublic',
                    'stock',
                    'creation',
                    'tva',
                    'pght',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    255,
                    255,
                    8 => 255,
                    255,
                ],
                'nullable' => [
                    2 => true,
                    4 => true,
                    true,
                    true,
                    8 => true,
                    true,
                    16 => true,
                ],
                'fetch' => [
                    15 => 2,
                    17 => 2,
                    21 => 2,
                    2,
                ],
                'sourceEntity' => [
                    15 => 'App\\Entity\\Produit',
                    17 => 'App\\Entity\\Produit',
                    21 => 'App\\Entity\\Produit',
                    'App\\Entity\\Produit',
                ],
                'sourceToTargetKeyColumns' => [
                    15 => [
                        'promotion_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    15 => [
                        'id' => 'promotion_id',
                    ],
                ],
                'joinColumns' => [
                    15 => [
                        $o[16],
                    ],
                    18 => [
                        $o[19],
                    ],
                ],
                'joinColumnFieldNames' => [
                    15 => [
                        'promotion_id' => 'promotion_id',
                    ],
                ],
                'unique' => [
                    16 => false,
                ],
                'referencedColumnName' => [
                    16 => 'id',
                    19 => 'id',
                    'id',
                ],
                'isOnDeleteCascade' => [
                    17 => true,
                ],
                'inversedBy' => [
                    17 => 'produits',
                ],
                'joinTable' => [
                    17 => $o[18],
                ],
                'joinTableColumns' => [
                    17 => [
                        'produit_id',
                        'fournisseur_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    17 => [
                        'produit_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    17 => [
                        'fournisseur_id' => 'id',
                    ],
                ],
                'inverseJoinColumns' => [
                    18 => [
                        $o[20],
                    ],
                ],
                'onDelete' => [
                    19 => 'CASCADE',
                    'CASCADE',
                ],
                'mappedBy' => [
                    21 => 'produit',
                    'produit',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    15 => 'promotion',
                    17 => 'fournisseurs',
                    21 => 'promotionProduits',
                    'commandeProduits',
                ],
                'targetEntity' => [
                    15 => 'App\\Entity\\Promotion',
                    17 => 'App\\Entity\\Fournisseur',
                    21 => 'App\\Entity\\PromotionProduit',
                    'App\\Entity\\CommandeProduit',
                ],
            ],
        ],
        $o[0],
        []
    );
},
34 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Poste',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PosteRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'description' => $o[3],
                        'salaire' => $o[4],
                        'type' => $o[5],
                        'heureSup' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                        'salaire' => 'salaire',
                        'type' => 'type',
                        'heure_sup' => 'heureSup',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                        'salaire' => 'salaire',
                        'type' => 'type',
                        'heureSup' => 'heure_sup',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'poste',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employes' => $o[7],
                        'posteEmployes' => $o[8],
                        'departement' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Poste',
                    10 => 'departement_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'integer',
                    'boolean',
                    'float',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'description',
                    'salaire',
                    'type',
                    'heureSup',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'description',
                    'salaire',
                    'type',
                    'heure_sup',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    3 => true,
                    6 => true,
                ],
                'fetch' => [
                    7 => 2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Poste',
                    'App\\Entity\\Poste',
                    'App\\Entity\\Poste',
                ],
                'mappedBy' => [
                    7 => 'poste',
                    'poste',
                ],
                'inversedBy' => [
                    9 => 'postes',
                ],
                'sourceToTargetKeyColumns' => [
                    9 => [
                        'departement_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    9 => [
                        'id' => 'departement_id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                ],
                'joinColumnFieldNames' => [
                    9 => [
                        'departement_id' => 'departement_id',
                    ],
                ],
                'referencedColumnName' => [
                    10 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'employes',
                    'posteEmployes',
                    'departement',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Employe',
                    'App\\Entity\\PosteEmploye',
                    'App\\Entity\\Departement',
                ],
            ],
        ],
        $o[0],
        []
    );
},
35 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Prime',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PrimeRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'montant' => $o[2],
                        'description' => $o[3],
                        'createdAt' => $o[4],
                        'base' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'description' => 'description',
                        'created_at' => 'createdAt',
                        'base' => 'base',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'description' => 'description',
                        'createdAt' => 'created_at',
                        'base' => 'base',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'prime',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Prime',
                    7 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'string',
                    'datetime',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'montant',
                    'description',
                    'createdAt',
                    'base',
                ],
                'columnName' => [
                    1 => 'id',
                    'montant',
                    'description',
                    'created_at',
                    'base',
                ],
                'length' => [
                    3 => 255,
                ],
                'nullable' => [
                    3 => true,
                ],
                'fetch' => [
                    6 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Prime',
                ],
                'inversedBy' => [
                    6 => 'primes',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'employe',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
36 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\PrimePerformance',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PrimePerformanceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'createAt' => $o[2],
                        'montant' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'create_at' => 'createAt',
                        'montant' => 'montant',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'createAt' => 'create_at',
                        'montant' => 'montant',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'prime_performance',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\PrimePerformance',
                    5 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'createAt',
                    'montant',
                ],
                'columnName' => [
                    1 => 'id',
                    'create_at',
                    'montant',
                ],
                'fetch' => [
                    4 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\PrimePerformance',
                ],
                'inversedBy' => [
                    4 => 'primePerformances',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'employe',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
37 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Promotion',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PromotionRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'designation' => $o[2],
                        'debut' => $o[3],
                        'fin' => $o[4],
                        'type' => $o[5],
                        'premier' => $o[6],
                        'ugpremier' => $o[7],
                        'deuxieme' => $o[8],
                        'ugdeuxieme' => $o[9],
                        'troisieme' => $o[10],
                        'ugtroisieme' => $o[11],
                        'quatrieme' => $o[12],
                        'ugquatrieme' => $o[13],
                        'cinquieme' => $o[14],
                        'ugcinquieme' => $o[15],
                        'reduction' => $o[16],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'designation' => 'designation',
                        'debut' => 'debut',
                        'fin' => 'fin',
                        'type' => 'type',
                        'premier' => 'premier',
                        'ugpremier' => 'ugpremier',
                        'deuxieme' => 'deuxieme',
                        'ugdeuxieme' => 'ugdeuxieme',
                        'troisieme' => 'troisieme',
                        'ugtroisieme' => 'ugtroisieme',
                        'quatrieme' => 'quatrieme',
                        'ugquatrieme' => 'ugquatrieme',
                        'cinquieme' => 'cinquieme',
                        'ugcinquieme' => 'ugcinquieme',
                        'reduction' => 'reduction',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'designation' => 'designation',
                        'debut' => 'debut',
                        'fin' => 'fin',
                        'type' => 'type',
                        'premier' => 'premier',
                        'ugpremier' => 'ugpremier',
                        'deuxieme' => 'deuxieme',
                        'ugdeuxieme' => 'ugdeuxieme',
                        'troisieme' => 'troisieme',
                        'ugtroisieme' => 'ugtroisieme',
                        'quatrieme' => 'quatrieme',
                        'ugquatrieme' => 'ugquatrieme',
                        'cinquieme' => 'cinquieme',
                        'ugcinquieme' => 'ugcinquieme',
                        'reduction' => 'reduction',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'promotion',
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[17],
                        'promotionProduits' => $o[19],
                    ],
                ],
                'idGenerator' => [
                    $o[20],
                ],
                'name' => [
                    'App\\Entity\\Promotion',
                    18 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'date',
                    'date',
                    'string',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'designation',
                    'debut',
                    'fin',
                    'type',
                    'premier',
                    'ugpremier',
                    'deuxieme',
                    'ugdeuxieme',
                    'troisieme',
                    'ugtroisieme',
                    'quatrieme',
                    'ugquatrieme',
                    'cinquieme',
                    'ugcinquieme',
                    'reduction',
                ],
                'columnName' => [
                    1 => 'id',
                    'designation',
                    'debut',
                    'fin',
                    'type',
                    'premier',
                    'ugpremier',
                    'deuxieme',
                    'ugdeuxieme',
                    'troisieme',
                    'ugtroisieme',
                    'quatrieme',
                    'ugquatrieme',
                    'cinquieme',
                    'ugcinquieme',
                    'reduction',
                ],
                'length' => [
                    2 => 255,
                    5 => 255,
                ],
                'nullable' => [
                    6 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    18 => false,
                ],
                'fetch' => [
                    17 => 2,
                    19 => 2,
                ],
                'sourceEntity' => [
                    17 => 'App\\Entity\\Promotion',
                    19 => 'App\\Entity\\Promotion',
                ],
                'sourceToTargetKeyColumns' => [
                    17 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    17 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    17 => [
                        $o[18],
                    ],
                ],
                'joinColumnFieldNames' => [
                    17 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'unique' => [
                    18 => false,
                ],
                'referencedColumnName' => [
                    18 => 'id',
                ],
                'mappedBy' => [
                    19 => 'promotion',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    17 => 'user',
                    19 => 'promotionProduits',
                ],
                'targetEntity' => [
                    17 => 'App\\Entity\\User',
                    19 => 'App\\Entity\\PromotionProduit',
                ],
            ],
        ],
        $o[0],
        []
    );
},
38 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Remboursement',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\RemboursementRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'montant' => $o[2],
                        'compte' => $o[3],
                        'date' => $o[4],
                        'type' => $o[5],
                        'numero' => $o[6],
                        'libele' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'compte' => 'compte',
                        'date' => 'date',
                        'type' => 'type',
                        'numero' => 'numero',
                        'libele' => 'libele',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'compte' => 'compte',
                        'date' => 'date',
                        'type' => 'type',
                        'numero' => 'numero',
                        'libele' => 'libele',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'remboursement',
                    ],
                ],
                'associationMappings' => [
                    [
                        'financement' => $o[8],
                        'banque' => $o[10],
                        'avoir' => $o[12],
                    ],
                ],
                'idGenerator' => [
                    $o[14],
                ],
                'name' => [
                    'App\\Entity\\Remboursement',
                    9 => 'financement_id',
                    11 => 'banque_id',
                    13 => 'avoir_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'string',
                    'datetime',
                    'string',
                    'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'montant',
                    'compte',
                    'date',
                    'type',
                    'numero',
                    'libele',
                ],
                'columnName' => [
                    1 => 'id',
                    'montant',
                    'compte',
                    'date',
                    'type',
                    'numero',
                    'libele',
                ],
                'length' => [
                    3 => 255,
                    5 => 255,
                    7 => 255,
                ],
                'nullable' => [
                    6 => true,
                    11 => true,
                ],
                'fetch' => [
                    8 => 2,
                    10 => 2,
                    12 => 2,
                ],
                'sourceEntity' => [
                    8 => 'App\\Entity\\Remboursement',
                    10 => 'App\\Entity\\Remboursement',
                    12 => 'App\\Entity\\Remboursement',
                ],
                'inversedBy' => [
                    8 => 'remboursements',
                    10 => 'remboursements',
                    12 => 'remboursement',
                ],
                'sourceToTargetKeyColumns' => [
                    8 => [
                        'financement_id' => 'id',
                    ],
                    10 => [
                        'banque_id' => 'id',
                    ],
                    12 => [
                        'avoir_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    8 => [
                        'id' => 'financement_id',
                    ],
                    10 => [
                        'id' => 'banque_id',
                    ],
                    12 => [
                        'id' => 'avoir_id',
                    ],
                ],
                'joinColumns' => [
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                    12 => [
                        $o[13],
                    ],
                ],
                'joinColumnFieldNames' => [
                    8 => [
                        'financement_id' => 'financement_id',
                    ],
                    10 => [
                        'banque_id' => 'banque_id',
                    ],
                    12 => [
                        'avoir_id' => 'avoir_id',
                    ],
                ],
                'referencedColumnName' => [
                    9 => 'id',
                    11 => 'id',
                    13 => 'id',
                ],
                'unique' => [
                    11 => false,
                    13 => true,
                ],
                'cascade' => [
                    12 => [
                        'persist',
                        'remove',
                    ],
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    8 => 'financement',
                    10 => 'banque',
                    12 => 'avoir',
                ],
                'targetEntity' => [
                    8 => 'App\\Entity\\Financement',
                    10 => 'App\\Entity\\Banque',
                    12 => 'App\\Entity\\Avoir',
                ],
            ],
        ],
        $o[0],
        []
    );
},
39 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Reponse',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ReponseRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'date' => $o[1],
                        'id' => $o[2],
                        'message' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'date' => 'date',
                        'id' => 'id',
                        'message' => 'message',
                    ],
                ],
                'columnNames' => [
                    [
                        'date' => 'date',
                        'id' => 'id',
                        'message' => 'message',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'reponse',
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[4],
                        'reclamation' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Reponse',
                    5 => 'user_id',
                    7 => 'reclamation_id',
                ],
                'type' => [
                    1 => 'date',
                    'integer',
                    'text',
                ],
                'fieldName' => [
                    1 => 'date',
                    'id',
                    'message',
                ],
                'columnName' => [
                    1 => 'date',
                    'id',
                    'message',
                ],
                'id' => [
                    2 => true,
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Reponse',
                    6 => 'App\\Entity\\Reponse',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'user_id' => 'id',
                    ],
                    6 => [
                        'reclamation_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'user_id',
                    ],
                    6 => [
                        'id' => 'reclamation_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'user_id' => 'user_id',
                    ],
                    6 => [
                        'reclamation_id' => 'reclamation_id',
                    ],
                ],
                'unique' => [
                    5 => false,
                    7 => false,
                ],
                'nullable' => [
                    5 => false,
                    7 => false,
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'user',
                    6 => 'reclamation',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\User',
                    6 => 'App\\Entity\\Reclamation',
                ],
            ],
        ],
        $o[0],
        []
    );
},
40 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Sanction',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\SanctionRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'dateCreation' => $o[2],
                        'dateDebut' => $o[3],
                        'dateFin' => $o[4],
                        'nombreJours' => $o[5],
                        'createdAt' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date_creation' => 'dateCreation',
                        'date_debut' => 'dateDebut',
                        'date_fin' => 'dateFin',
                        'nombre_jours' => 'nombreJours',
                        'created_at' => 'createdAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'dateCreation' => 'date_creation',
                        'dateDebut' => 'date_debut',
                        'dateFin' => 'date_fin',
                        'nombreJours' => 'nombre_jours',
                        'createdAt' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'sanction',
                    ],
                ],
                'associationMappings' => [
                    [
                        'typeSanction' => $o[7],
                        'employe' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Sanction',
                    8 => 'type_sanction_id',
                    10 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                    'datetime',
                    'datetime',
                    'integer',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'dateCreation',
                    'dateDebut',
                    'dateFin',
                    'nombreJours',
                    'createdAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'date_creation',
                    'date_debut',
                    'date_fin',
                    'nombre_jours',
                    'created_at',
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                ],
                'fetch' => [
                    7 => 2,
                    9 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Sanction',
                    9 => 'App\\Entity\\Sanction',
                ],
                'inversedBy' => [
                    7 => 'sanctions',
                    9 => 'sanctions',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'type_sanction_id' => 'id',
                    ],
                    9 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'type_sanction_id',
                    ],
                    9 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'type_sanction_id' => 'type_sanction_id',
                    ],
                    9 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    10 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'typeSanction',
                    9 => 'employe',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\TypeSanction',
                    9 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
41 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Suggestion',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\SuggestionRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'message' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'message' => 'message',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'message' => 'message',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'suggestion',
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Suggestion',
                    4 => 'client_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'message',
                ],
                'columnName' => [
                    1 => 'id',
                    'message',
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Suggestion',
                ],
                'sourceToTargetKeyColumns' => [
                    3 => [
                        'client_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    3 => [
                        'id' => 'client_id',
                    ],
                ],
                'joinColumns' => [
                    3 => [
                        $o[4],
                    ],
                ],
                'joinColumnFieldNames' => [
                    3 => [
                        'client_id' => 'client_id',
                    ],
                ],
                'unique' => [
                    4 => false,
                ],
                'nullable' => [
                    4 => true,
                ],
                'referencedColumnName' => [
                    4 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'client',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Client',
                ],
            ],
        ],
        $o[0],
        []
    );
},
42 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Test',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\TestRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'stg' => $o[2],
                        'intg' => $o[3],
                        'bln' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'stg' => 'stg',
                        'intg' => 'intg',
                        'bln' => 'bln',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'stg' => 'stg',
                        'intg' => 'intg',
                        'bln' => 'bln',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'test',
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Test',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'integer',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'stg',
                    'intg',
                    'bln',
                ],
                'columnName' => [
                    1 => 'id',
                    'stg',
                    'intg',
                    'bln',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    4 => true,
                ],
            ],
        ],
        $o[0],
        []
    );
},
43 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Transfert',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\TransfertRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'montant' => $o[2],
                        'source' => $o[3],
                        'destination' => $o[4],
                        'date' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'source' => 'source',
                        'destination' => 'destination',
                        'date' => 'date',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'source' => 'source',
                        'destination' => 'destination',
                        'date' => 'date',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'transfert',
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[6],
                        'banque' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\Transfert',
                    7 => 'user_id',
                    9 => 'banque_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'string',
                    'string',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'montant',
                    'source',
                    'destination',
                    'date',
                ],
                'columnName' => [
                    1 => 'id',
                    'montant',
                    'source',
                    'destination',
                    'date',
                ],
                'length' => [
                    3 => 255,
                    255,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Transfert',
                    8 => 'App\\Entity\\Transfert',
                ],
                'inversedBy' => [
                    6 => 'transferts',
                    8 => 'transferts',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'user_id' => 'id',
                    ],
                    8 => [
                        'banque_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'user_id',
                    ],
                    8 => [
                        'id' => 'banque_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'user_id' => 'user_id',
                    ],
                    8 => [
                        'banque_id' => 'banque_id',
                    ],
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                ],
                'unique' => [
                    9 => false,
                ],
                'nullable' => [
                    9 => true,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'user',
                    8 => 'banque',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Employe',
                    8 => 'App\\Entity\\Banque',
                ],
            ],
        ],
        $o[0],
        []
    );
},
44 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\TypeConge',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\TypeCongeRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'description' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'description' => 'description',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'type_conge',
                    ],
                ],
                'associationMappings' => [
                    [
                        'conges' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\TypeConge',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'description',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'description',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    3 => true,
                ],
                'fetch' => [
                    4 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\TypeConge',
                ],
                'mappedBy' => [
                    4 => 'type',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'conges',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Conges',
                ],
            ],
        ],
        $o[0],
        []
    );
},
45 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\TypeContrat',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\TypeContratRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'contenu' => $o[2],
                        'type' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'contenu' => 'contenu',
                        'type' => 'type',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'contenu' => 'contenu',
                        'type' => 'type',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'type_contrat',
                    ],
                ],
                'associationMappings' => [
                    [
                        'contrats' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\TypeContrat',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'contenu',
                    'type',
                ],
                'columnName' => [
                    1 => 'id',
                    'contenu',
                    'type',
                ],
                'length' => [
                    3 => 255,
                ],
                'fetch' => [
                    4 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\TypeContrat',
                ],
                'mappedBy' => [
                    4 => 'typecontrat',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'contrats',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Contrat',
                ],
            ],
        ],
        $o[0],
        []
    );
},
46 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\TypeSanction',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\TypeSanctionRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'descritpion' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'descritpion' => 'descritpion',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'descritpion' => 'descritpion',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'type_sanction',
                    ],
                ],
                'associationMappings' => [
                    [
                        'sanctions' => $o[4],
                        'decisions' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\TypeSanction',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'descritpion',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'descritpion',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    4 => 2,
                    2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\TypeSanction',
                    'App\\Entity\\TypeSanction',
                ],
                'mappedBy' => [
                    4 => 'typeSanction',
                    'typeSanction',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'sanctions',
                    'decisions',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Sanction',
                    'App\\Entity\\Decision',
                ],
            ],
        ],
        $o[0],
        []
    );
},
47 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Approvisionnement',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ApprovisionnementRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'quantite' => $o[2],
                        'date' => $o[3],
                        'archive' => $o[4],
                        'lot' => $o[5],
                        'peremption' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'quantite' => 'quantite',
                        'date' => 'date',
                        'archive' => 'archive',
                        'lot' => 'lot',
                        'peremption' => 'peremption',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'quantite' => 'quantite',
                        'date' => 'date',
                        'archive' => 'archive',
                        'lot' => 'lot',
                        'peremption' => 'peremption',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'approvisionnement',
                    ],
                ],
                'associationMappings' => [
                    [
                        'produit' => $o[7],
                        'approvisionner' => $o[9],
                        'fournisseur' => $o[11],
                    ],
                ],
                'idGenerator' => [
                    $o[13],
                ],
                'name' => [
                    'App\\Entity\\Approvisionnement',
                    8 => 'produit_id',
                    10 => 'approvisionner_id',
                    12 => 'fournisseur_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'date',
                    'integer',
                    'string',
                    'date',
                ],
                'fieldName' => [
                    1 => 'id',
                    'quantite',
                    'date',
                    'archive',
                    'lot',
                    'peremption',
                ],
                'columnName' => [
                    1 => 'id',
                    'quantite',
                    'date',
                    'archive',
                    'lot',
                    'peremption',
                ],
                'length' => [
                    5 => 255,
                ],
                'fetch' => [
                    7 => 2,
                    9 => 2,
                    11 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Approvisionnement',
                    9 => 'App\\Entity\\Approvisionnement',
                    11 => 'App\\Entity\\Approvisionnement',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'produit_id' => 'id',
                    ],
                    9 => [
                        'approvisionner_id' => 'id',
                    ],
                    11 => [
                        'fournisseur_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'produit_id',
                    ],
                    9 => [
                        'id' => 'approvisionner_id',
                    ],
                    11 => [
                        'id' => 'fournisseur_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'produit_id' => 'produit_id',
                    ],
                    9 => [
                        'approvisionner_id' => 'approvisionner_id',
                    ],
                    11 => [
                        'fournisseur_id' => 'fournisseur_id',
                    ],
                ],
                'unique' => [
                    8 => false,
                    10 => false,
                ],
                'nullable' => [
                    8 => false,
                    10 => false,
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    10 => 'id',
                    12 => 'id',
                ],
                'inversedBy' => [
                    11 => 'approvisionnements',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'produit',
                    9 => 'approvisionner',
                    11 => 'fournisseur',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Produit',
                    9 => 'App\\Entity\\Approvisionner',
                    11 => 'App\\Entity\\Fournisseur',
                ],
            ],
        ],
        $o[0],
        []
    );
},
48 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AvoirReste',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AvoirResteRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'quantite' => $o[3],
                        'quantitelivre' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'quantite' => 'quantite',
                        'quantitelivre' => 'quantitelivre',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'quantite' => 'quantite',
                        'quantitelivre' => 'quantitelivre',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'avoir_reste',
                    ],
                ],
                'associationMappings' => [
                    [
                        'avoir' => $o[5],
                        'client' => $o[7],
                        'admin' => $o[9],
                        'produit' => $o[11],
                        'livrer' => $o[13],
                        'commande' => $o[15],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\AvoirReste',
                    6 => 'avoir_id',
                    8 => 'client_id',
                    10 => 'admin_id',
                    12 => 'produit_id',
                    14 => 'livrer_id',
                    16 => 'commande_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'integer',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'quantite',
                    'quantitelivre',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'quantite',
                    'quantitelivre',
                ],
                'fetch' => [
                    5 => 2,
                    7 => 2,
                    9 => 2,
                    11 => 2,
                    13 => 2,
                    15 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\AvoirReste',
                    7 => 'App\\Entity\\AvoirReste',
                    9 => 'App\\Entity\\AvoirReste',
                    11 => 'App\\Entity\\AvoirReste',
                    13 => 'App\\Entity\\AvoirReste',
                    15 => 'App\\Entity\\AvoirReste',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'avoir_id' => 'id',
                    ],
                    7 => [
                        'client_id' => 'id',
                    ],
                    9 => [
                        'admin_id' => 'id',
                    ],
                    11 => [
                        'produit_id' => 'id',
                    ],
                    13 => [
                        'livrer_id' => 'id',
                    ],
                    15 => [
                        'commande_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'avoir_id',
                    ],
                    7 => [
                        'id' => 'client_id',
                    ],
                    9 => [
                        'id' => 'admin_id',
                    ],
                    11 => [
                        'id' => 'produit_id',
                    ],
                    13 => [
                        'id' => 'livrer_id',
                    ],
                    15 => [
                        'id' => 'commande_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                    13 => [
                        $o[14],
                    ],
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'avoir_id' => 'avoir_id',
                    ],
                    7 => [
                        'client_id' => 'client_id',
                    ],
                    9 => [
                        'admin_id' => 'admin_id',
                    ],
                    11 => [
                        'produit_id' => 'produit_id',
                    ],
                    13 => [
                        'livrer_id' => 'livrer_id',
                    ],
                    15 => [
                        'commande_id' => 'commande_id',
                    ],
                ],
                'unique' => [
                    6 => false,
                    8 => false,
                    10 => false,
                    12 => false,
                    14 => false,
                    16 => false,
                ],
                'nullable' => [
                    6 => false,
                    8 => false,
                    10 => false,
                    12 => false,
                    14 => false,
                    16 => false,
                ],
                'referencedColumnName' => [
                    6 => 'id',
                    8 => 'id',
                    10 => 'id',
                    12 => 'id',
                    14 => 'id',
                    16 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'avoir',
                    7 => 'client',
                    9 => 'admin',
                    11 => 'produit',
                    13 => 'livrer',
                    15 => 'commande',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Avoir',
                    7 => 'App\\Entity\\Client',
                    9 => 'App\\Entity\\Employe',
                    11 => 'App\\Entity\\Produit',
                    13 => 'App\\Entity\\Livrer',
                    15 => 'App\\Entity\\Commande',
                ],
            ],
        ],
        $o[0],
        []
    );
},
49 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Candidature',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CandidatureRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'prenom' => $o[2],
                        'nom' => $o[3],
                        'datnaiss' => $o[4],
                        'lieunaiss' => $o[5],
                        'activite' => $o[6],
                        'niveau' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'prenom' => 'prenom',
                        'nom' => 'nom',
                        'datnaiss' => 'datnaiss',
                        'lieunaiss' => 'lieunaiss',
                        'activite' => 'activite',
                        'niveau' => 'niveau',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'prenom' => 'prenom',
                        'nom' => 'nom',
                        'datnaiss' => 'datnaiss',
                        'lieunaiss' => 'lieunaiss',
                        'activite' => 'activite',
                        'niveau' => 'niveau',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'candidature',
                    ],
                ],
                'associationMappings' => [
                    [
                        'cv' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\Candidature',
                    9 => 'cv_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'date',
                    'string',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'prenom',
                    'nom',
                    'datnaiss',
                    'lieunaiss',
                    'activite',
                    'niveau',
                ],
                'columnName' => [
                    1 => 'id',
                    'prenom',
                    'nom',
                    'datnaiss',
                    'lieunaiss',
                    'activite',
                    'niveau',
                ],
                'length' => [
                    2 => 255,
                    255,
                    5 => 255,
                    255,
                    255,
                ],
                'cascade' => [
                    8 => [
                        'persist',
                        'refresh',
                    ],
                ],
                'fetch' => [
                    8 => 2,
                ],
                'sourceEntity' => [
                    8 => 'App\\Entity\\Candidature',
                ],
                'sourceToTargetKeyColumns' => [
                    8 => [
                        'cv_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    8 => [
                        'id' => 'cv_id',
                    ],
                ],
                'joinColumns' => [
                    8 => [
                        $o[9],
                    ],
                ],
                'joinColumnFieldNames' => [
                    8 => [
                        'cv_id' => 'cv_id',
                    ],
                ],
                'unique' => [
                    9 => true,
                ],
                'nullable' => [
                    9 => true,
                ],
                'referencedColumnName' => [
                    9 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    8 => 'cv',
                ],
                'targetEntity' => [
                    8 => 'App\\Entity\\Cv',
                ],
            ],
        ],
        $o[0],
        []
    );
},
50 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\CommandeProduit',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CommandeProduitRepository',
                ],
                'identifier' => [
                    [
                        'produit',
                        'commande',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'date' => $o[1],
                        'session' => $o[2],
                        'publique' => $o[3],
                        'quantite' => $o[4],
                        'tva' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'date' => 'date',
                        'session' => 'session',
                        'publique' => 'publique',
                        'quantite' => 'quantite',
                        'tva' => 'tva',
                    ],
                ],
                'columnNames' => [
                    [
                        'date' => 'date',
                        'session' => 'session',
                        'publique' => 'publique',
                        'quantite' => 'quantite',
                        'tva' => 'tva',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'commande_produit',
                    ],
                ],
                'associationMappings' => [
                    [
                        'promotion' => $o[6],
                        'produit' => $o[8],
                        'commande' => $o[10],
                    ],
                ],
                'isIdentifierComposite' => [
                    true,
                ],
                'containsForeignIdentifier' => [
                    true,
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\CommandeProduit',
                    7 => 'promotion_id',
                    9 => 'produit_id',
                    11 => 'commande_id',
                ],
                'type' => [
                    1 => 'date',
                    'float',
                    'float',
                    'integer',
                    'float',
                ],
                'fieldName' => [
                    1 => 'date',
                    'session',
                    'publique',
                    'quantite',
                    'tva',
                ],
                'columnName' => [
                    1 => 'date',
                    'session',
                    'publique',
                    'quantite',
                    'tva',
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                    10 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\CommandeProduit',
                    8 => 'App\\Entity\\CommandeProduit',
                    10 => 'App\\Entity\\CommandeProduit',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'promotion_id' => 'id',
                    ],
                    8 => [
                        'produit_id' => 'id',
                    ],
                    10 => [
                        'commande_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'promotion_id',
                    ],
                    8 => [
                        'id' => 'produit_id',
                    ],
                    10 => [
                        'id' => 'commande_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'promotion_id' => 'promotion_id',
                    ],
                    8 => [
                        'produit_id' => 'produit_id',
                    ],
                    10 => [
                        'commande_id' => 'commande_id',
                    ],
                ],
                'unique' => [
                    7 => false,
                    9 => false,
                    11 => false,
                ],
                'nullable' => [
                    7 => true,
                    9 => false,
                    11 => false,
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                    11 => 'id',
                ],
                'id' => [
                    8 => true,
                    10 => true,
                ],
                'inversedBy' => [
                    8 => 'commandeProduits',
                    10 => 'commandeProduits',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'promotion',
                    8 => 'produit',
                    10 => 'commande',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Promotion',
                    8 => 'App\\Entity\\Produit',
                    10 => 'App\\Entity\\Commande',
                ],
            ],
        ],
        $o[0],
        []
    );
},
51 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Compte',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CompteRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'numero' => $o[2],
                        'intitule' => $o[3],
                        'classe' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'numero' => 'numero',
                        'intitule' => 'intitule',
                        'classe' => 'classe',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'numero' => 'numero',
                        'intitule' => 'intitule',
                        'classe' => 'classe',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'compte',
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\Compte',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'numero',
                    'intitule',
                    'classe',
                ],
                'columnName' => [
                    1 => 'id',
                    'numero',
                    'intitule',
                    'classe',
                ],
                'length' => [
                    3 => 255,
                    255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
52 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Credit',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CreditRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tva' => $o[2],
                        'date' => $o[3],
                        'type' => $o[4],
                        'montant' => $o[5],
                        'compte' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tva' => 'tva',
                        'date' => 'date',
                        'type' => 'type',
                        'montant' => 'montant',
                        'compte' => 'compte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tva' => 'tva',
                        'date' => 'date',
                        'type' => 'type',
                        'montant' => 'montant',
                        'compte' => 'compte',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'credit',
                    ],
                ],
                'associationMappings' => [
                    [
                        'financement' => $o[7],
                        'paiement' => $o[9],
                        'versement' => $o[11],
                        'transfert' => $o[13],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\Credit',
                    8 => 'financement_id',
                    10 => 'paiement_id',
                    12 => 'versement_id',
                    14 => 'transfert_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'float',
                    'datetime',
                    'string',
                    'integer',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tva',
                    'date',
                    'type',
                    'montant',
                    'compte',
                ],
                'columnName' => [
                    1 => 'id',
                    'tva',
                    'date',
                    'type',
                    'montant',
                    'compte',
                ],
                'nullable' => [
                    2 => true,
                    8 => true,
                    10 => true,
                    12 => true,
                    14 => true,
                ],
                'length' => [
                    4 => 255,
                ],
                'fetch' => [
                    7 => 2,
                    9 => 2,
                    11 => 2,
                    13 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Credit',
                    9 => 'App\\Entity\\Credit',
                    11 => 'App\\Entity\\Credit',
                    13 => 'App\\Entity\\Credit',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'financement_id' => 'id',
                    ],
                    9 => [
                        'paiement_id' => 'id',
                    ],
                    11 => [
                        'versement_id' => 'id',
                    ],
                    13 => [
                        'transfert_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'financement_id',
                    ],
                    9 => [
                        'id' => 'paiement_id',
                    ],
                    11 => [
                        'id' => 'versement_id',
                    ],
                    13 => [
                        'id' => 'transfert_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                    13 => [
                        $o[14],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'financement_id' => 'financement_id',
                    ],
                    9 => [
                        'paiement_id' => 'paiement_id',
                    ],
                    11 => [
                        'versement_id' => 'versement_id',
                    ],
                    13 => [
                        'transfert_id' => 'transfert_id',
                    ],
                ],
                'unique' => [
                    8 => false,
                    10 => false,
                    12 => false,
                    14 => true,
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    10 => 'id',
                    12 => 'id',
                    14 => 'id',
                ],
                'cascade' => [
                    13 => [
                        'persist',
                        'remove',
                    ],
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'financement',
                    9 => 'paiement',
                    11 => 'versement',
                    13 => 'transfert',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Financement',
                    9 => 'App\\Entity\\Paiement',
                    11 => 'App\\Entity\\Versement',
                    13 => 'App\\Entity\\Transfert',
                ],
            ],
        ],
        $o[0],
        []
    );
},
53 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Cv',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CvRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'url' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'url' => 'url',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'url' => 'url',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'cv',
                    ],
                ],
                'idGenerator' => [
                    $o[3],
                ],
                'name' => [
                    'App\\Entity\\Cv',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'url',
                ],
                'columnName' => [
                    1 => 'id',
                    'url',
                ],
                'length' => [
                    2 => 255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
54 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Debit',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\DebitRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'montant' => $o[3],
                        'type' => $o[4],
                        'compte' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'montant' => 'montant',
                        'type' => 'type',
                        'compte' => 'compte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'montant' => 'montant',
                        'type' => 'type',
                        'compte' => 'compte',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'debit',
                    ],
                ],
                'associationMappings' => [
                    [
                        'depense' => $o[6],
                        'transfert' => $o[8],
                        'remboursement' => $o[10],
                        'achat' => $o[12],
                        'salaire' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[16],
                ],
                'name' => [
                    'App\\Entity\\Debit',
                    7 => 'depense_id',
                    9 => 'transfert_id',
                    11 => 'remboursement_id',
                    13 => 'achat_id',
                    15 => 'salaire_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'integer',
                    'string',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'montant',
                    'type',
                    'compte',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'montant',
                    'type',
                    'compte',
                ],
                'length' => [
                    4 => 255,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                    10 => 2,
                    12 => 2,
                    14 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Debit',
                    8 => 'App\\Entity\\Debit',
                    10 => 'App\\Entity\\Debit',
                    12 => 'App\\Entity\\Debit',
                    14 => 'App\\Entity\\Debit',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'depense_id' => 'id',
                    ],
                    8 => [
                        'transfert_id' => 'id',
                    ],
                    10 => [
                        'remboursement_id' => 'id',
                    ],
                    12 => [
                        'achat_id' => 'id',
                    ],
                    14 => [
                        'salaire_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'depense_id',
                    ],
                    8 => [
                        'id' => 'transfert_id',
                    ],
                    10 => [
                        'id' => 'remboursement_id',
                    ],
                    12 => [
                        'id' => 'achat_id',
                    ],
                    14 => [
                        'id' => 'salaire_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                    12 => [
                        $o[13],
                    ],
                    14 => [
                        $o[15],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'depense_id' => 'depense_id',
                    ],
                    8 => [
                        'transfert_id' => 'transfert_id',
                    ],
                    10 => [
                        'remboursement_id' => 'remboursement_id',
                    ],
                    12 => [
                        'achat_id' => 'achat_id',
                    ],
                    14 => [
                        'salaire_id' => 'salaire_id',
                    ],
                ],
                'unique' => [
                    7 => false,
                    9 => true,
                ],
                'nullable' => [
                    7 => true,
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                    11 => 'id',
                    13 => 'id',
                    15 => 'id',
                ],
                'cascade' => [
                    8 => [
                        'persist',
                        'remove',
                    ],
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'depense',
                    8 => 'transfert',
                    10 => 'remboursement',
                    12 => 'achat',
                    14 => 'salaire',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Depense',
                    8 => 'App\\Entity\\Transfert',
                    10 => 'App\\Entity\\Remboursement',
                    12 => 'App\\Entity\\Achat',
                    14 => 'App\\Entity\\PaieSalaire',
                ],
            ],
        ],
        $o[0],
        []
    );
},
55 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Decision',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\DecisionRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'motif' => $o[2],
                        'dateDecision' => $o[3],
                        'dateConfirm' => $o[4],
                        'demandes' => $o[5],
                        'type' => $o[6],
                        'dateDebut' => $o[7],
                        'dateFin' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'motif' => 'motif',
                        'date_decision' => 'dateDecision',
                        'date_confirm' => 'dateConfirm',
                        'demandes' => 'demandes',
                        'type' => 'type',
                        'date_debut' => 'dateDebut',
                        'date_fin' => 'dateFin',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'motif' => 'motif',
                        'dateDecision' => 'date_decision',
                        'dateConfirm' => 'date_confirm',
                        'demandes' => 'demandes',
                        'type' => 'type',
                        'dateDebut' => 'date_debut',
                        'dateFin' => 'date_fin',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'decision',
                    ],
                ],
                'associationMappings' => [
                    [
                        'absences' => $o[9],
                        'responsable' => $o[11],
                        'explication' => $o[13],
                        'typeSanction' => $o[15],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\Decision',
                    10 => 'absences_id',
                    12 => 'responsable_id',
                    14 => 'explication_id',
                    16 => 'type_sanction_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'datetime',
                    'datetime',
                    'text',
                    'string',
                    'datetime',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'motif',
                    'dateDecision',
                    'dateConfirm',
                    'demandes',
                    'type',
                    'dateDebut',
                    'dateFin',
                ],
                'columnName' => [
                    1 => 'id',
                    'motif',
                    'date_decision',
                    'date_confirm',
                    'demandes',
                    'type',
                    'date_debut',
                    'date_fin',
                ],
                'length' => [
                    2 => 255,
                    6 => 255,
                ],
                'nullable' => [
                    4 => true,
                    true,
                    7 => true,
                    true,
                    12 => true,
                    16 => true,
                ],
                'fetch' => [
                    9 => 2,
                    11 => 2,
                    13 => 2,
                    15 => 2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\Decision',
                    11 => 'App\\Entity\\Decision',
                    13 => 'App\\Entity\\Decision',
                    15 => 'App\\Entity\\Decision',
                ],
                'inversedBy' => [
                    9 => 'decisions',
                    11 => 'decisions',
                    13 => 'decisions',
                    15 => 'decisions',
                ],
                'sourceToTargetKeyColumns' => [
                    9 => [
                        'absences_id' => 'id',
                    ],
                    11 => [
                        'responsable_id' => 'id',
                    ],
                    13 => [
                        'explication_id' => 'id',
                    ],
                    15 => [
                        'type_sanction_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    9 => [
                        'id' => 'absences_id',
                    ],
                    11 => [
                        'id' => 'responsable_id',
                    ],
                    13 => [
                        'id' => 'explication_id',
                    ],
                    15 => [
                        'id' => 'type_sanction_id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                    13 => [
                        $o[14],
                    ],
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    9 => [
                        'absences_id' => 'absences_id',
                    ],
                    11 => [
                        'responsable_id' => 'responsable_id',
                    ],
                    13 => [
                        'explication_id' => 'explication_id',
                    ],
                    15 => [
                        'type_sanction_id' => 'type_sanction_id',
                    ],
                ],
                'referencedColumnName' => [
                    10 => 'id',
                    12 => 'id',
                    14 => 'id',
                    16 => 'id',
                ],
                'unique' => [
                    12 => false,
                    16 => false,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'absences',
                    11 => 'responsable',
                    13 => 'explication',
                    15 => 'typeSanction',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\Absence',
                    11 => 'App\\Entity\\Employe',
                    13 => 'App\\Entity\\DemandeExplication',
                    15 => 'App\\Entity\\TypeSanction',
                ],
            ],
        ],
        $o[0],
        []
    );
},
56 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Ecriture',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\EcritureRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'solde' => $o[2],
                        'date' => $o[3],
                        'type' => $o[4],
                        'comptedebit' => $o[5],
                        'comptecredit' => $o[6],
                        'libelle' => $o[7],
                        'montant' => $o[8],
                        'libellecomptedebit' => $o[9],
                        'libellecomptecredit' => $o[10],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'solde' => 'solde',
                        'date' => 'date',
                        'type' => 'type',
                        'comptedebit' => 'comptedebit',
                        'comptecredit' => 'comptecredit',
                        'libelle' => 'libelle',
                        'montant' => 'montant',
                        'libellecomptedebit' => 'libellecomptedebit',
                        'libellecomptecredit' => 'libellecomptecredit',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'solde' => 'solde',
                        'date' => 'date',
                        'type' => 'type',
                        'comptedebit' => 'comptedebit',
                        'comptecredit' => 'comptecredit',
                        'libelle' => 'libelle',
                        'montant' => 'montant',
                        'libellecomptedebit' => 'libellecomptedebit',
                        'libellecomptecredit' => 'libellecomptecredit',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'ecriture',
                    ],
                ],
                'associationMappings' => [
                    [
                        'debit' => $o[11],
                        'credit' => $o[13],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\Ecriture',
                    12 => 'debit_id',
                    14 => 'credit_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'date',
                    'string',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'solde',
                    'date',
                    'type',
                    'comptedebit',
                    'comptecredit',
                    'libelle',
                    'montant',
                    'libellecomptedebit',
                    'libellecomptecredit',
                ],
                'columnName' => [
                    1 => 'id',
                    'solde',
                    'date',
                    'type',
                    'comptedebit',
                    'comptecredit',
                    'libelle',
                    'montant',
                    'libellecomptedebit',
                    'libellecomptecredit',
                ],
                'length' => [
                    4 => 255,
                    255,
                    255,
                    255,
                    9 => 255,
                    255,
                ],
                'nullable' => [
                    5 => true,
                    true,
                    true,
                    9 => true,
                    true,
                ],
                'fetch' => [
                    11 => 2,
                    13 => 2,
                ],
                'sourceEntity' => [
                    11 => 'App\\Entity\\Ecriture',
                    13 => 'App\\Entity\\Ecriture',
                ],
                'sourceToTargetKeyColumns' => [
                    11 => [
                        'debit_id' => 'id',
                    ],
                    13 => [
                        'credit_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    11 => [
                        'id' => 'debit_id',
                    ],
                    13 => [
                        'id' => 'credit_id',
                    ],
                ],
                'joinColumns' => [
                    11 => [
                        $o[12],
                    ],
                    13 => [
                        $o[14],
                    ],
                ],
                'joinColumnFieldNames' => [
                    11 => [
                        'debit_id' => 'debit_id',
                    ],
                    13 => [
                        'credit_id' => 'credit_id',
                    ],
                ],
                'referencedColumnName' => [
                    12 => 'id',
                    14 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    11 => 'debit',
                    13 => 'credit',
                ],
                'targetEntity' => [
                    11 => 'App\\Entity\\Debit',
                    13 => 'App\\Entity\\Credit',
                ],
            ],
        ],
        $o[0],
        []
    );
},
57 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\EmployeFormation',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\EmployeFormationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'employe_formation',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[2],
                        'formation' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\EmployeFormation',
                    3 => 'employe_id',
                    5 => 'formation_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                ],
                'columnName' => [
                    1 => 'id',
                ],
                'fetch' => [
                    2 => 2,
                    4 => 2,
                ],
                'sourceEntity' => [
                    2 => 'App\\Entity\\EmployeFormation',
                    4 => 'App\\Entity\\EmployeFormation',
                ],
                'inversedBy' => [
                    2 => 'employeFormations',
                    4 => 'employeFormations',
                ],
                'sourceToTargetKeyColumns' => [
                    2 => [
                        'employe_id' => 'id',
                    ],
                    4 => [
                        'formation_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    2 => [
                        'id' => 'employe_id',
                    ],
                    4 => [
                        'id' => 'formation_id',
                    ],
                ],
                'joinColumns' => [
                    2 => [
                        $o[3],
                    ],
                    4 => [
                        $o[5],
                    ],
                ],
                'joinColumnFieldNames' => [
                    2 => [
                        'employe_id' => 'employe_id',
                    ],
                    4 => [
                        'formation_id' => 'formation_id',
                    ],
                ],
                'referencedColumnName' => [
                    3 => 'id',
                    5 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    2 => 'employe',
                    4 => 'formation',
                ],
                'targetEntity' => [
                    2 => 'App\\Entity\\Employe',
                    4 => 'App\\Entity\\Formation',
                ],
            ],
        ],
        $o[0],
        []
    );
},
58 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\EvaluationDetail',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\EvaluationDetailRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'note' => $o[2],
                        'commentaire' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'note' => 'note',
                        'commentaire' => 'commentaire',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'note' => 'note',
                        'commentaire' => 'commentaire',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'evaluation_detail',
                    ],
                ],
                'associationMappings' => [
                    [
                        'evaluation' => $o[4],
                        'critereEvaluation' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\EvaluationDetail',
                    5 => 'evaluation_id',
                    7 => 'critere_evaluation_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'note',
                    'commentaire',
                ],
                'columnName' => [
                    1 => 'id',
                    'note',
                    'commentaire',
                ],
                'nullable' => [
                    3 => true,
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\EvaluationDetail',
                    6 => 'App\\Entity\\EvaluationDetail',
                ],
                'inversedBy' => [
                    4 => 'evaluationDetails',
                    6 => 'evaluationDetails',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'evaluation_id' => 'id',
                    ],
                    6 => [
                        'critere_evaluation_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'evaluation_id',
                    ],
                    6 => [
                        'id' => 'critere_evaluation_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'evaluation_id' => 'evaluation_id',
                    ],
                    6 => [
                        'critere_evaluation_id' => 'critere_evaluation_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'evaluation',
                    6 => 'critereEvaluation',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Evaluation',
                    6 => 'App\\Entity\\CritereEvaluation',
                ],
            ],
        ],
        $o[0],
        []
    );
},
59 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\FournisseurProduit',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\FournisseurProduitRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'fournisseur_produit',
                    ],
                ],
                'associationMappings' => [
                    [
                        'produit' => $o[2],
                        'fournisseur' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\FournisseurProduit',
                    3 => 'produit_id',
                    5 => 'fournisseur_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                ],
                'columnName' => [
                    1 => 'id',
                ],
                'fetch' => [
                    2 => 2,
                    4 => 2,
                ],
                'sourceEntity' => [
                    2 => 'App\\Entity\\FournisseurProduit',
                    4 => 'App\\Entity\\FournisseurProduit',
                ],
                'inversedBy' => [
                    2 => 'fournisseurProduits',
                    4 => 'fournisseurProduits',
                ],
                'sourceToTargetKeyColumns' => [
                    2 => [
                        'produit_id' => 'id',
                    ],
                    4 => [
                        'fournisseur_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    2 => [
                        'id' => 'produit_id',
                    ],
                    4 => [
                        'id' => 'fournisseur_id',
                    ],
                ],
                'joinColumns' => [
                    2 => [
                        $o[3],
                    ],
                    4 => [
                        $o[5],
                    ],
                ],
                'joinColumnFieldNames' => [
                    2 => [
                        'produit_id' => 'produit_id',
                    ],
                    4 => [
                        'fournisseur_id' => 'fournisseur_id',
                    ],
                ],
                'referencedColumnName' => [
                    3 => 'id',
                    5 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    2 => 'produit',
                    4 => 'fournisseur',
                ],
                'targetEntity' => [
                    2 => 'App\\Entity\\Produit',
                    4 => 'App\\Entity\\Fournisseur',
                ],
            ],
        ],
        $o[0],
        []
    );
},
60 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Image',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ImageRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'url' => $o[2],
                        'alt' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'url' => 'url',
                        'alt' => 'alt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'url' => 'url',
                        'alt' => 'alt',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'image',
                    ],
                ],
                'associationMappings' => [
                    [
                        'album' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Image',
                    5 => 'album_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'url',
                    'alt',
                ],
                'columnName' => [
                    1 => 'id',
                    'url',
                    'alt',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
                'nullable' => [
                    3 => true,
                    5 => false,
                ],
                'fetch' => [
                    4 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Image',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'album_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'album_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'album_id' => 'album_id',
                    ],
                ],
                'unique' => [
                    5 => false,
                ],
                'referencedColumnName' => [
                    5 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'album',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Album',
                ],
            ],
        ],
        $o[0],
        []
    );
},
61 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\LivrerProduit',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\LivrerProduitRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'lot' => $o[2],
                        'peremption' => $o[3],
                        'reste' => $o[4],
                        'date' => $o[5],
                        'quantitelivrer' => $o[6],
                        'restealivrer' => $o[7],
                        'quantitecommander' => $o[8],
                        'archive' => $o[9],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'lot' => 'lot',
                        'peremption' => 'peremption',
                        'reste' => 'reste',
                        'date' => 'date',
                        'quantitelivrer' => 'quantitelivrer',
                        'restealivrer' => 'restealivrer',
                        'quantitecommander' => 'quantitecommander',
                        'archive' => 'archive',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'lot' => 'lot',
                        'peremption' => 'peremption',
                        'reste' => 'reste',
                        'date' => 'date',
                        'quantitelivrer' => 'quantitelivrer',
                        'restealivrer' => 'restealivrer',
                        'quantitecommander' => 'quantitecommander',
                        'archive' => 'archive',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'livrer_produit',
                    ],
                ],
                'associationMappings' => [
                    [
                        'retour' => $o[10],
                        'promotion' => $o[12],
                        'commande' => $o[14],
                        'produit' => $o[16],
                        'livrer' => $o[18],
                    ],
                ],
                'idGenerator' => [
                    $o[20],
                ],
                'name' => [
                    'App\\Entity\\LivrerProduit',
                    11 => 'retour_id',
                    13 => 'promotion_id',
                    15 => 'commande_id',
                    17 => 'produit_id',
                    19 => 'livrer_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'date',
                    'boolean',
                    'date',
                    'integer',
                    'integer',
                    'integer',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'lot',
                    'peremption',
                    'reste',
                    'date',
                    'quantitelivrer',
                    'restealivrer',
                    'quantitecommander',
                    'archive',
                ],
                'columnName' => [
                    1 => 'id',
                    'lot',
                    'peremption',
                    'reste',
                    'date',
                    'quantitelivrer',
                    'restealivrer',
                    'quantitecommander',
                    'archive',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    10 => 2,
                    12 => 2,
                    14 => 2,
                    16 => 2,
                    18 => 2,
                ],
                'sourceEntity' => [
                    10 => 'App\\Entity\\LivrerProduit',
                    12 => 'App\\Entity\\LivrerProduit',
                    14 => 'App\\Entity\\LivrerProduit',
                    16 => 'App\\Entity\\LivrerProduit',
                    18 => 'App\\Entity\\LivrerProduit',
                ],
                'sourceToTargetKeyColumns' => [
                    10 => [
                        'retour_id' => 'id',
                    ],
                    12 => [
                        'promotion_id' => 'id',
                    ],
                    14 => [
                        'commande_id' => 'id',
                    ],
                    16 => [
                        'produit_id' => 'id',
                    ],
                    18 => [
                        'livrer_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    10 => [
                        'id' => 'retour_id',
                    ],
                    12 => [
                        'id' => 'promotion_id',
                    ],
                    14 => [
                        'id' => 'commande_id',
                    ],
                    16 => [
                        'id' => 'produit_id',
                    ],
                    18 => [
                        'id' => 'livrer_id',
                    ],
                ],
                'joinColumns' => [
                    10 => [
                        $o[11],
                    ],
                    12 => [
                        $o[13],
                    ],
                    14 => [
                        $o[15],
                    ],
                    16 => [
                        $o[17],
                    ],
                    18 => [
                        $o[19],
                    ],
                ],
                'joinColumnFieldNames' => [
                    10 => [
                        'retour_id' => 'retour_id',
                    ],
                    12 => [
                        'promotion_id' => 'promotion_id',
                    ],
                    14 => [
                        'commande_id' => 'commande_id',
                    ],
                    16 => [
                        'produit_id' => 'produit_id',
                    ],
                    18 => [
                        'livrer_id' => 'livrer_id',
                    ],
                ],
                'unique' => [
                    11 => false,
                    13 => false,
                    15 => false,
                    17 => false,
                    19 => false,
                ],
                'nullable' => [
                    11 => true,
                    13 => true,
                    15 => false,
                    17 => false,
                    19 => false,
                ],
                'referencedColumnName' => [
                    11 => 'id',
                    13 => 'id',
                    15 => 'id',
                    17 => 'id',
                    19 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    10 => 'retour',
                    12 => 'promotion',
                    14 => 'commande',
                    16 => 'produit',
                    18 => 'livrer',
                ],
                'targetEntity' => [
                    10 => 'App\\Entity\\Retour',
                    12 => 'App\\Entity\\Promotion',
                    14 => 'App\\Entity\\Commande',
                    16 => 'App\\Entity\\Produit',
                    18 => 'App\\Entity\\Livrer',
                ],
            ],
        ],
        $o[0],
        []
    );
},
62 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\LivrerReste',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\LivrerResteRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'quantite' => $o[3],
                        'quantitelivre' => $o[4],
                        'session' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'quantite' => 'quantite',
                        'quantitelivre' => 'quantitelivre',
                        'session' => 'session',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'quantite' => 'quantite',
                        'quantitelivre' => 'quantitelivre',
                        'session' => 'session',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'livrer_reste',
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[6],
                        'produit' => $o[8],
                        'livrer' => $o[10],
                        'commande' => $o[12],
                    ],
                ],
                'idGenerator' => [
                    $o[14],
                ],
                'name' => [
                    'App\\Entity\\LivrerReste',
                    7 => 'client_id',
                    9 => 'produit_id',
                    11 => 'livrer_id',
                    13 => 'commande_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                    'integer',
                    'integer',
                    'float',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'quantite',
                    'quantitelivre',
                    'session',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'quantite',
                    'quantitelivre',
                    'session',
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                    10 => 2,
                    12 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\LivrerReste',
                    8 => 'App\\Entity\\LivrerReste',
                    10 => 'App\\Entity\\LivrerReste',
                    12 => 'App\\Entity\\LivrerReste',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'client_id' => 'id',
                    ],
                    8 => [
                        'produit_id' => 'id',
                    ],
                    10 => [
                        'livrer_id' => 'id',
                    ],
                    12 => [
                        'commande_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'client_id',
                    ],
                    8 => [
                        'id' => 'produit_id',
                    ],
                    10 => [
                        'id' => 'livrer_id',
                    ],
                    12 => [
                        'id' => 'commande_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                    12 => [
                        $o[13],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'client_id' => 'client_id',
                    ],
                    8 => [
                        'produit_id' => 'produit_id',
                    ],
                    10 => [
                        'livrer_id' => 'livrer_id',
                    ],
                    12 => [
                        'commande_id' => 'commande_id',
                    ],
                ],
                'unique' => [
                    7 => false,
                    9 => false,
                    11 => false,
                    13 => false,
                ],
                'nullable' => [
                    7 => false,
                    9 => false,
                    11 => false,
                    13 => false,
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                    11 => 'id',
                    13 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'client',
                    8 => 'produit',
                    10 => 'livrer',
                    12 => 'commande',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Client',
                    8 => 'App\\Entity\\Produit',
                    10 => 'App\\Entity\\Livrer',
                    12 => 'App\\Entity\\Commande',
                ],
            ],
        ],
        $o[0],
        []
    );
},
63 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\MessageReply',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\MessageReplyRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'content' => $o[2],
                        'sentAt' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'content' => 'content',
                        'sent_at' => 'sentAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'content' => 'content',
                        'sentAt' => 'sent_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'message_reply',
                    ],
                ],
                'associationMappings' => [
                    [
                        'sender' => $o[4],
                        'message' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\MessageReply',
                    5 => 'sender_id',
                    7 => 'message_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'content',
                    'sentAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'content',
                    'sent_at',
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\MessageReply',
                    6 => 'App\\Entity\\MessageReply',
                ],
                'inversedBy' => [
                    4 => 'messageReplies',
                    6 => 'messageReplies',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'sender_id' => 'id',
                    ],
                    6 => [
                        'message_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'sender_id',
                    ],
                    6 => [
                        'id' => 'message_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'sender_id' => 'sender_id',
                    ],
                    6 => [
                        'message_id' => 'message_id',
                    ],
                ],
                'unique' => [
                    5 => false,
                ],
                'nullable' => [
                    5 => false,
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'sender',
                    6 => 'message',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Employe',
                    6 => 'App\\Entity\\MessageRecipient',
                ],
            ],
        ],
        $o[0],
        []
    );
},
64 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Mois',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\MoisRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'mois',
                    ],
                ],
                'associationMappings' => [
                    [
                        'paies' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Mois',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Mois',
                ],
                'mappedBy' => [
                    3 => 'mois',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'paies',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Paie',
                ],
            ],
        ],
        $o[0],
        []
    );
},
65 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Notification',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\NotificationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'message' => $o[2],
                        'isRead' => $o[3],
                        'createdAt' => $o[4],
                        'lien' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'message' => 'message',
                        'is_read' => 'isRead',
                        'created_at' => 'createdAt',
                        'lien' => 'lien',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'message' => 'message',
                        'isRead' => 'is_read',
                        'createdAt' => 'created_at',
                        'lien' => 'lien',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'notification',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Notification',
                    7 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'boolean',
                    'datetime',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'message',
                    'isRead',
                    'createdAt',
                    'lien',
                ],
                'columnName' => [
                    1 => 'id',
                    'message',
                    'is_read',
                    'created_at',
                    'lien',
                ],
                'length' => [
                    2 => 255,
                    5 => 255,
                ],
                'nullable' => [
                    5 => true,
                ],
                'fetch' => [
                    6 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Notification',
                ],
                'inversedBy' => [
                    6 => 'notifications',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'employe',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
66 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Numero',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\NumeroRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'numero',
                    ],
                ],
                'idGenerator' => [
                    $o[2],
                ],
                'name' => [
                    'App\\Entity\\Numero',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                ],
                'columnName' => [
                    1 => 'id',
                ],
            ],
        ],
        $o[0],
        []
    );
},
67 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Paiement',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PaiementRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'date' => $o[1],
                        'id' => $o[2],
                        'type' => $o[3],
                        'numero' => $o[4],
                        'montant' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'date' => 'date',
                        'id' => 'id',
                        'type' => 'type',
                        'numero' => 'numero',
                        'montant' => 'montant',
                    ],
                ],
                'columnNames' => [
                    [
                        'date' => 'date',
                        'id' => 'id',
                        'type' => 'type',
                        'numero' => 'numero',
                        'montant' => 'montant',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'paiement',
                    ],
                ],
                'associationMappings' => [
                    [
                        'commande' => $o[6],
                        'user' => $o[8],
                        'banque' => $o[10],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\Paiement',
                    7 => 'commande_id',
                    9 => 'user_id',
                    11 => 'banque_id',
                ],
                'type' => [
                    1 => 'date',
                    'integer',
                    'string',
                    'integer',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'date',
                    'id',
                    'type',
                    'numero',
                    'montant',
                ],
                'columnName' => [
                    1 => 'date',
                    'id',
                    'type',
                    'numero',
                    'montant',
                ],
                'id' => [
                    2 => true,
                ],
                'length' => [
                    3 => 255,
                ],
                'nullable' => [
                    4 => true,
                    7 => false,
                    9 => true,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                    10 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Paiement',
                    8 => 'App\\Entity\\Paiement',
                    10 => 'App\\Entity\\Paiement',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'commande_id' => 'id',
                    ],
                    8 => [
                        'user_id' => 'id',
                    ],
                    10 => [
                        'banque_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'commande_id',
                    ],
                    8 => [
                        'id' => 'user_id',
                    ],
                    10 => [
                        'id' => 'banque_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'commande_id' => 'commande_id',
                    ],
                    8 => [
                        'user_id' => 'user_id',
                    ],
                    10 => [
                        'banque_id' => 'banque_id',
                    ],
                ],
                'unique' => [
                    7 => false,
                    9 => false,
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                    11 => 'id',
                ],
                'inversedBy' => [
                    10 => 'paiements',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'commande',
                    8 => 'user',
                    10 => 'banque',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Commande',
                    8 => 'App\\Entity\\User',
                    10 => 'App\\Entity\\Banque',
                ],
            ],
        ],
        $o[0],
        []
    );
},
68 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\PaieSalaire',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PaieSalaireRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'montant' => $o[2],
                        'compte' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'compte' => 'compte',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'montant' => 'montant',
                        'compte' => 'compte',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'paie_salaire',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[4],
                        'user' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\PaieSalaire',
                    5 => 'employe_id',
                    7 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'montant',
                    'compte',
                ],
                'columnName' => [
                    1 => 'id',
                    'montant',
                    'compte',
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\PaieSalaire',
                    6 => 'App\\Entity\\PaieSalaire',
                ],
                'inversedBy' => [
                    4 => 'paieSalaires',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'employe_id' => 'id',
                    ],
                    6 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'employe_id',
                    ],
                    6 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'employe_id' => 'employe_id',
                    ],
                    6 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'employe',
                    6 => 'user',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Employe',
                    6 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
69 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\PosteEmploye',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PosteEmployeRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'datedebut' => $o[2],
                        'datefin' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'datedebut' => 'datedebut',
                        'datefin' => 'datefin',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'datedebut' => 'datedebut',
                        'datefin' => 'datefin',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'poste_employe',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[4],
                        'poste' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\PosteEmploye',
                    5 => 'employe_id',
                    7 => 'poste_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'datedebut',
                    'datefin',
                ],
                'columnName' => [
                    1 => 'id',
                    'datedebut',
                    'datefin',
                ],
                'nullable' => [
                    3 => true,
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\PosteEmploye',
                    6 => 'App\\Entity\\PosteEmploye',
                ],
                'inversedBy' => [
                    4 => 'posteEmployes',
                    6 => 'posteEmployes',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'employe_id' => 'id',
                    ],
                    6 => [
                        'poste_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'employe_id',
                    ],
                    6 => [
                        'id' => 'poste_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'employe_id' => 'employe_id',
                    ],
                    6 => [
                        'poste_id' => 'poste_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'employe',
                    6 => 'poste',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Employe',
                    6 => 'App\\Entity\\Poste',
                ],
            ],
        ],
        $o[0],
        []
    );
},
70 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\PromotionProduit',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PromotionProduitRepository',
                ],
                'identifier' => [
                    [
                        'produit',
                        'promotion',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'promotion_produit',
                    ],
                ],
                'associationMappings' => [
                    [
                        'produit' => $o[1],
                        'promotion' => $o[3],
                    ],
                ],
                'isIdentifierComposite' => [
                    true,
                ],
                'containsForeignIdentifier' => [
                    true,
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\PromotionProduit',
                    2 => 'produit_id',
                    4 => 'promotion_id',
                ],
                'fetch' => [
                    1 => 2,
                    3 => 2,
                ],
                'id' => [
                    1 => true,
                    3 => true,
                ],
                'sourceEntity' => [
                    1 => 'App\\Entity\\PromotionProduit',
                    3 => 'App\\Entity\\PromotionProduit',
                ],
                'inversedBy' => [
                    1 => 'promotionProduits',
                    3 => 'promotionProduits',
                ],
                'sourceToTargetKeyColumns' => [
                    1 => [
                        'produit_id' => 'id',
                    ],
                    3 => [
                        'promotion_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    1 => [
                        'id' => 'produit_id',
                    ],
                    3 => [
                        'id' => 'promotion_id',
                    ],
                ],
                'joinColumns' => [
                    1 => [
                        $o[2],
                    ],
                    3 => [
                        $o[4],
                    ],
                ],
                'joinColumnFieldNames' => [
                    1 => [
                        'produit_id' => 'produit_id',
                    ],
                    3 => [
                        'promotion_id' => 'promotion_id',
                    ],
                ],
                'unique' => [
                    2 => false,
                    4 => false,
                ],
                'nullable' => [
                    2 => false,
                    4 => false,
                ],
                'referencedColumnName' => [
                    2 => 'id',
                    4 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    1 => 'produit',
                    3 => 'promotion',
                ],
                'targetEntity' => [
                    1 => 'App\\Entity\\Produit',
                    3 => 'App\\Entity\\Promotion',
                ],
            ],
        ],
        $o[0],
        []
    );
},
71 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\ReponseAbsence',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ReponseAbsenceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'cause' => $o[2],
                        'file' => $o[3],
                        'reponse' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'cause' => 'cause',
                        'file' => 'file',
                        'reponse' => 'reponse',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'cause' => 'cause',
                        'file' => 'file',
                        'reponse' => 'reponse',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'reponse_absence',
                    ],
                ],
                'associationMappings' => [
                    [
                        'absence' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\ReponseAbsence',
                    6 => 'absence_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'cause',
                    'file',
                    'reponse',
                ],
                'columnName' => [
                    1 => 'id',
                    'cause',
                    'file',
                    'reponse',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
                'nullable' => [
                    3 => true,
                ],
                'fetch' => [
                    5 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\ReponseAbsence',
                ],
                'inversedBy' => [
                    5 => 'reponseAbsences',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'absence_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'absence_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'absence_id' => 'absence_id',
                    ],
                ],
                'referencedColumnName' => [
                    6 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'absence',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Absence',
                ],
            ],
        ],
        $o[0],
        []
    );
},
72 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\ReponseExplication',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ReponseExplicationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'reponse' => $o[2],
                        'dateReponse' => $o[3],
                        'status' => $o[4],
                        'objet' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'reponse' => 'reponse',
                        'date_reponse' => 'dateReponse',
                        'status' => 'status',
                        'objet' => 'objet',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'reponse' => 'reponse',
                        'dateReponse' => 'date_reponse',
                        'status' => 'status',
                        'objet' => 'objet',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'reponse_explication',
                    ],
                ],
                'associationMappings' => [
                    [
                        'employe' => $o[6],
                        'demande' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\ReponseExplication',
                    7 => 'employe_id',
                    9 => 'demande_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                    'datetime',
                    'boolean',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'reponse',
                    'dateReponse',
                    'status',
                    'objet',
                ],
                'columnName' => [
                    1 => 'id',
                    'reponse',
                    'date_reponse',
                    'status',
                    'objet',
                ],
                'length' => [
                    5 => 255,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\ReponseExplication',
                    8 => 'App\\Entity\\ReponseExplication',
                ],
                'inversedBy' => [
                    6 => 'reponseExplications',
                    8 => 'reponseExplications',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'employe_id' => 'id',
                    ],
                    8 => [
                        'demande_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'employe_id',
                    ],
                    8 => [
                        'id' => 'demande_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'employe_id' => 'employe_id',
                    ],
                    8 => [
                        'demande_id' => 'demande_id',
                    ],
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'employe',
                    8 => 'demande',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Employe',
                    8 => 'App\\Entity\\DemandeExplication',
                ],
            ],
        ],
        $o[0],
        []
    );
},
73 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Retenue',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\RetenueRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'motif' => $o[2],
                        'montant' => $o[3],
                        'type' => $o[4],
                        'dateDeduction' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'motif' => 'motif',
                        'montant' => 'montant',
                        'type' => 'type',
                        'date_deduction' => 'dateDeduction',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'motif' => 'motif',
                        'montant' => 'montant',
                        'type' => 'type',
                        'dateDeduction' => 'date_deduction',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'retenue',
                    ],
                ],
                'associationMappings' => [
                    [
                        'paie' => $o[6],
                        'employe' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\Retenue',
                    7 => 'paie_id',
                    9 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'integer',
                    'string',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'motif',
                    'montant',
                    'type',
                    'dateDeduction',
                ],
                'columnName' => [
                    1 => 'id',
                    'motif',
                    'montant',
                    'type',
                    'date_deduction',
                ],
                'length' => [
                    2 => 255,
                    4 => 255,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Retenue',
                    8 => 'App\\Entity\\Retenue',
                ],
                'inversedBy' => [
                    6 => 'retenues',
                    8 => 'retenues',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'paie_id' => 'id',
                    ],
                    8 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'paie_id',
                    ],
                    8 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'paie_id' => 'paie_id',
                    ],
                    8 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'paie',
                    8 => 'employe',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Paie',
                    8 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
74 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\RetourProduit',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\RetourProduitRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'quantite' => $o[3],
                        'motif' => $o[4],
                        'lot' => $o[5],
                        'peremption' => $o[6],
                        'reapprovisionner' => $o[7],
                        'rembourser' => $o[8],
                        'avoir' => $o[9],
                        'valider' => $o[10],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'quantite' => 'quantite',
                        'motif' => 'motif',
                        'lot' => 'lot',
                        'peremption' => 'peremption',
                        'reapprovisionner' => 'reapprovisionner',
                        'rembourser' => 'rembourser',
                        'avoir' => 'avoir',
                        'valider' => 'valider',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'quantite' => 'quantite',
                        'motif' => 'motif',
                        'lot' => 'lot',
                        'peremption' => 'peremption',
                        'reapprovisionner' => 'reapprovisionner',
                        'rembourser' => 'rembourser',
                        'avoir' => 'avoir',
                        'valider' => 'valider',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'retour_produit',
                    ],
                ],
                'associationMappings' => [
                    [
                        'retour' => $o[11],
                        'commande' => $o[13],
                        'produit' => $o[15],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\RetourProduit',
                    12 => 'retour_id',
                    14 => 'commande_id',
                    16 => 'produit_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime',
                    'integer',
                    'string',
                    'integer',
                    'date',
                    'boolean',
                    'boolean',
                    'boolean',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'quantite',
                    'motif',
                    'lot',
                    'peremption',
                    'reapprovisionner',
                    'rembourser',
                    'avoir',
                    'valider',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'quantite',
                    'motif',
                    'lot',
                    'peremption',
                    'reapprovisionner',
                    'rembourser',
                    'avoir',
                    'valider',
                ],
                'length' => [
                    4 => 255,
                ],
                'fetch' => [
                    11 => 2,
                    13 => 2,
                    15 => 2,
                ],
                'sourceEntity' => [
                    11 => 'App\\Entity\\RetourProduit',
                    13 => 'App\\Entity\\RetourProduit',
                    15 => 'App\\Entity\\RetourProduit',
                ],
                'sourceToTargetKeyColumns' => [
                    11 => [
                        'retour_id' => 'id',
                    ],
                    13 => [
                        'commande_id' => 'id',
                    ],
                    15 => [
                        'produit_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    11 => [
                        'id' => 'retour_id',
                    ],
                    13 => [
                        'id' => 'commande_id',
                    ],
                    15 => [
                        'id' => 'produit_id',
                    ],
                ],
                'joinColumns' => [
                    11 => [
                        $o[12],
                    ],
                    13 => [
                        $o[14],
                    ],
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    11 => [
                        'retour_id' => 'retour_id',
                    ],
                    13 => [
                        'commande_id' => 'commande_id',
                    ],
                    15 => [
                        'produit_id' => 'produit_id',
                    ],
                ],
                'unique' => [
                    12 => false,
                    14 => false,
                    16 => false,
                ],
                'nullable' => [
                    12 => false,
                    14 => false,
                    16 => false,
                ],
                'referencedColumnName' => [
                    12 => 'id',
                    14 => 'id',
                    16 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    11 => 'retour',
                    13 => 'commande',
                    15 => 'produit',
                ],
                'targetEntity' => [
                    11 => 'App\\Entity\\Retour',
                    13 => 'App\\Entity\\Commande',
                    15 => 'App\\Entity\\Produit',
                ],
            ],
        ],
        $o[0],
        []
    );
},
75 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Stock',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\StockRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'lot' => $o[2],
                        'peremption' => $o[3],
                        'quantite' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'lot' => 'lot',
                        'peremption' => 'peremption',
                        'quantite' => 'quantite',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'lot' => 'lot',
                        'peremption' => 'peremption',
                        'quantite' => 'quantite',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'stock',
                    ],
                ],
                'associationMappings' => [
                    [
                        'produit' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\Stock',
                    6 => 'produit_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'date',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'id',
                    'lot',
                    'peremption',
                    'quantite',
                ],
                'columnName' => [
                    1 => 'id',
                    'lot',
                    'peremption',
                    'quantite',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    5 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\Stock',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'produit_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'produit_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'produit_id' => 'produit_id',
                    ],
                ],
                'unique' => [
                    6 => false,
                ],
                'nullable' => [
                    6 => false,
                ],
                'referencedColumnName' => [
                    6 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'produit',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Produit',
                ],
            ],
        ],
        $o[0],
        []
    );
},
76 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\TamponAbsence',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\TamponAbsenceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'createdAt' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'created_at' => 'createdAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'createdAt' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'tampon_absence',
                    ],
                ],
                'associationMappings' => [
                    [
                        'absence' => $o[3],
                        'employe' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\TamponAbsence',
                    4 => 'absence_id',
                    6 => 'employe_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'createdAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'created_at',
                ],
                'fetch' => [
                    3 => 2,
                    5 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\TamponAbsence',
                    5 => 'App\\Entity\\TamponAbsence',
                ],
                'inversedBy' => [
                    3 => 'tamponAbsences',
                    5 => 'tamponAbsences',
                ],
                'sourceToTargetKeyColumns' => [
                    3 => [
                        'absence_id' => 'id',
                    ],
                    5 => [
                        'employe_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    3 => [
                        'id' => 'absence_id',
                    ],
                    5 => [
                        'id' => 'employe_id',
                    ],
                ],
                'joinColumns' => [
                    3 => [
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                    ],
                ],
                'joinColumnFieldNames' => [
                    3 => [
                        'absence_id' => 'absence_id',
                    ],
                    5 => [
                        'employe_id' => 'employe_id',
                    ],
                ],
                'referencedColumnName' => [
                    4 => 'id',
                    6 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'absence',
                    5 => 'employe',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Absence',
                    5 => 'App\\Entity\\Employe',
                ],
            ],
        ],
        $o[0],
        []
    );
},
77 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Versement',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\VersementRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'date' => $o[1],
                        'id' => $o[2],
                        'type' => $o[3],
                        'numero' => $o[4],
                        'montant' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'date' => 'date',
                        'id' => 'id',
                        'type' => 'type',
                        'numero' => 'numero',
                        'montant' => 'montant',
                    ],
                ],
                'columnNames' => [
                    [
                        'date' => 'date',
                        'id' => 'id',
                        'type' => 'type',
                        'numero' => 'numero',
                        'montant' => 'montant',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'versement',
                    ],
                ],
                'associationMappings' => [
                    [
                        'commande' => $o[6],
                        'user' => $o[8],
                        'banque' => $o[10],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\Versement',
                    7 => 'commande_id',
                    9 => 'user_id',
                    11 => 'banque_id',
                ],
                'type' => [
                    1 => 'date',
                    'integer',
                    'string',
                    'integer',
                    'integer',
                ],
                'fieldName' => [
                    1 => 'date',
                    'id',
                    'type',
                    'numero',
                    'montant',
                ],
                'columnName' => [
                    1 => 'date',
                    'id',
                    'type',
                    'numero',
                    'montant',
                ],
                'id' => [
                    2 => true,
                ],
                'length' => [
                    3 => 255,
                ],
                'nullable' => [
                    4 => true,
                    7 => false,
                    9 => true,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                    10 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Versement',
                    8 => 'App\\Entity\\Versement',
                    10 => 'App\\Entity\\Versement',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'commande_id' => 'id',
                    ],
                    8 => [
                        'user_id' => 'id',
                    ],
                    10 => [
                        'banque_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'commande_id',
                    ],
                    8 => [
                        'id' => 'user_id',
                    ],
                    10 => [
                        'id' => 'banque_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'commande_id' => 'commande_id',
                    ],
                    8 => [
                        'user_id' => 'user_id',
                    ],
                    10 => [
                        'banque_id' => 'banque_id',
                    ],
                ],
                'unique' => [
                    7 => false,
                    9 => false,
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                    11 => 'id',
                ],
                'inversedBy' => [
                    10 => 'versements',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'commande',
                    8 => 'user',
                    10 => 'banque',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Commande',
                    8 => 'App\\Entity\\User',
                    10 => 'App\\Entity\\Banque',
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
